[{"path":[]},{"path":"dzt/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"dzt/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"dzt/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to c3t","title":"Contributing to c3t","text":"outlines propose change c3t. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"dzt/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to c3t","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"dzt/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to c3t","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"dzt/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to c3t","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"atero18/c3t\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"dzt/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to c3t","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"dzt/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to c3t","text":"Please note c3t project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"dzt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"dzt/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"dzt/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"dzt/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"dzt/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"dzt/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"dzt/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"dzt/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"dzt/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"dzt/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"dzt/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"dzt/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"dzt/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"dzt/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"dzt/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"dzt/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"dzt/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"dzt/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"dzt/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"dzt/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"dzt/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"dzt/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with c3t","title":"Getting help with c3t","text":"Thanks using c3t! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"dzt/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with c3t","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"dzt/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with c3t","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"dzt/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with c3t","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"dzt/articles/introduction-fr.html","id":"régionalisation-ascendante-hiérarchique-rah","dir":"Articles","previous_headings":"","what":"Régionalisation Ascendante Hiérarchique (RAH)","title":"Introduction à c3t","text":"Dans l’optique de trouver une solution faisable à un problème de régionalisation avec éventuelle contrainte de taille min / et ou max, la fonction AHR peut être utilisée. Celle-ci permet d’appliquer un algorithme de Classification Ascendante Hiérarchique modifié afin de respecter les contraintes de contiguïté et taille maximale. Cette fonction va appliquer une ou plusieurs itérations de CAH en fonction des paramétrisations données par l’utilisateur. Plusieurs paramètres sont disponibles. Pour plus de détails voir help(\"AHR\"). Comme pour la CAH classique la fonction prend une distance de liaison (linkage). Plusieurs distances sont déjà implémentées dans le package, et sont visibles via l’appel suivant : Une distance de liaison peut également être proposée par l’utilisateur sous la forme d’une fonction prenant en argument une matrice de distances entre les éléments d’un premier cluster et les éléments d’un autre. Plusieurs distances de liaison peut être indiquées.","code":"available_linkages() #> [1] \"Single\"    \"Complete\"  \"Centroid\"  \"Average\"   \"Medoid\"    \"Hausdorff\""},{"path":"dzt/articles/introduction-fr.html","id":"contrainte-de-fusion","dir":"Articles","previous_headings":"Régionalisation Ascendante Hiérarchique (RAH)","what":"Contrainte de fusion","title":"Introduction à c3t","text":"Lorsqu’il y une contrainte de taille min, l’algorithme n’assure pas que celle-ci sera vérifiée contrairement aux autres contraintes. Des paramètres permettent de perturber le parcours de l’arbre afin de faciliter la vérification. fusionConstraint indique s’il faut appliquer une contrainte sur le choix de la fusion et si oui laquelle. Les possibilités implémentées sont les suivantes : NA signifiant qu’aucune contrainte n’est ajoutée. fusionConstraintMode définit comment la contrainte de fusion (si elle existe) doit être appliquée. Plusieurs contraintes et modes de fusions peuvent être demandés.","code":"available_fusion_constraints() #> [1] NA             \"singletonMin\" \"singletonAny\" \"minMin\"       \"sizePenalty\" available_fusion_modes() #> [1] \"deterministic\" \"random\""},{"path":"dzt/articles/introduction-fr.html","id":"situation-initiale","dir":"Articles","previous_headings":"Régionalisation Ascendante Hiérarchique (RAH)","what":"Situation initiale","title":"Introduction à c3t","text":"Plutôt que de démarrer du bas de l’arbre, c’est-à-dire de la partition triviale (1 élément = 1 cluster), il est possible de démarrer de plus profond et peut-être d’obtenir de meilleur résultat d’un point de vue global ou du point de vue du respect de l’éventuelle contrainte de taille minimale. L’utilisateur peut choisir s’il souhaite ne démarrer que du bas de l’arbre (de manière classique) ou également essayer de démarrer à partir d’une ou plusieurs partitions initiales générées aléatoirement. C’est ce que permet le paramètre nbTries, indiquant le nombre de situations initiales à tester, dont la classique.propFusionsInit indique à quel point les partitions obtenues aléatoirement doivent être récupérées profondément dans l’arbre.","code":""},{"path":"dzt/articles/introduction-fr.html","id":"critères","dir":"Articles","previous_headings":"Régionalisation Ascendante Hiérarchique (RAH)","what":"Critères","title":"Introduction à c3t","text":"Un ou plusieurs critères de classification peuvent être calculés sur les différentes solutions faisables, si elles existent. Plusieurs critères sont disponibles : Le critère du score de silhouette n’est disponible que si le package cluster est installé. Pour cet exemple nous choisissons le critère “CHI”, c’est-à-dire l’indice de Calinski-Harabasz. Celui-ci nécessite qu’un contexte soit donné et que toutes ses variables soient quantitatives.","code":"available_criteria() #> [1] \"CHI\"        \"Dunn\"       \"Silhouette\" critere <- \"CHI\""},{"path":"dzt/articles/introduction-fr.html","id":"application","dir":"Articles","previous_headings":"Régionalisation Ascendante Hiérarchique (RAH)","what":"Application","title":"Introduction à c3t","text":"Appliquons l’algorithme sur nous données. Pour cet exemple nous fixons deux contraintes de taille non-triviale (.e. qui ne sont pas systématiquement vérifiées) et utilisons la distance euclidienne. L’algorithme utilise de l’aléatoire pour la génération de partitions initiales et éventuellement l’application de contraintes de fusion. Nous fixons donc préalablement une graine aléatoire. La fonction renvoie une liste de 3 tibble. Les solutions faisables sont contenues dans results : 38 solutions faisables distinctes ont été obtenues. La solution en elle-même se trouve dans la colonne partition. Voici la solution faisable qui offre le meilleur indice de Calinski-Harabasz parmi celles trouvées : Celle-ci vérifie bien les contraintes de contiguïté et de taille :","code":"m <- 5.0 M <- 40.0  d <- \"euclidean\" set.seed(123L) resRAH <- AHR(contiguity = contiguite,               d = d, data = data,               sizes = individus,               m = m, M = M,               criteria = critere,               fusionConstraints = available_fusion_constraints(),               fusionConstraintModes = available_fusion_modes(),               parallele = FALSE) #> ℹ Starting time: 2023-09-14 10:26:12.715985 #> ℹ 45 AHC to evaluate #> → 432 non-trivial regionalisations obtained #> ✔ 56 feasable partitions obtained #> → 18 redundancies have been removed. #> → Calculation of the CHI criterion #> → Execution time: 6.37433385848999 resRAH$results %>%   select(nbClusters, partition, CHI) %>%   head() #> # A tibble: 6 × 3 #>   nbClusters partition      CHI #>        <int> <named list> <dbl> #> 1          3 <int [20]>    2.39 #> 2          4 <int [20]>    2.32 #> 3          4 <int [20]>    2.27 #> 4          3 <int [20]>    2.18 #> 5          3 <int [20]>    2.04 #> 6          5 <int [20]>    1.95 regionalisation <- resRAH$results$partition[[1L]] regionalisation #>  [1] 1 2 2 1 1 1 3 1 3 3 1 3 1 1 1 3 1 1 1 3 is_feasible_solution(regionalisation, contiguite,                      individus, m, M) #> [1] TRUE"},{"path":"dzt/articles/introduction-fr.html","id":"amélioration-de-la-solution-faisable","dir":"Articles","previous_headings":"","what":"Amélioration de la solution faisable","title":"Introduction à c3t","text":"Une solution faisable ayant été obtenue, souhaite l’améliorer au regard d’un certain critère tout en préservant les contraintes. C’est ce que permet de faire la fonction enhance_feasible. En conservant notre critère précédent (Calinski-Harabasz), regarde si celui-ci peut être amélioré. regarde également si le critère d’optimisation locale (“AHC”) permet d’améliorer l’ICH. Le critère “AHC” nécessite une distance de liaison. propose d’utiliser les distances de saut minimal et maximal. L’optimisation sous l’ICH permet d’augmenter cet indice de 0,1 , soit une amélioration d’environ 4L%. La solution proposée est bien une solution faisable :","code":"criteresAmelioration <- c(\"AHC\", \"CHI\") set.seed(123L) resEnhance <- enhance_feasible(regionalisation,                                contiguity = contiguite,                                d = d, data = data,                                sizes = individus,                                m = m, M = M,                                enhanceCriteria = criteresAmelioration,                                linkages = c(\"single\", \"complete\"),                                parallele = FALSE,                                verbose = TRUE) #> → Evaluation of the 3 enhancements #> → Calculation of 1 evaluation criteria on the initial partition #> → Calcul of 1 evaluation criteria on the 3 enhanced partitions  resEnhance$results %>% select(-tempsCalcul_mins) #> # A tibble: 3 × 6 #>   criterion linkage  statut       iterations regionalisationOpti dt_CHI #>   <chr>     <chr>    <chr>             <int> <list>               <dbl> #> 1 AHC       Single   amelioration          1 <int [20]>          -0.258 #> 2 AHC       Complete amelioration          6 <int [20]>          -1.61  #> 3 CHI       NA       amelioration          1 <int [20]>           0.117 partitionCHI <- resEnhance$results$regionalisationOpti[[3L]] is_feasible_solution(partitionCHI,                      contiguite,                      individus, m, M) #> [1] TRUE"},{"path":"dzt/articles/introduction-fr.html","id":"régularisation","dir":"Articles","previous_headings":"","what":"Régularisation","title":"Introduction à c3t","text":"Supposons que l’algorithme AHR n’ait pas pu fournir une solution faisable (ce qui ne peut être le cas que s’il y une contrainte de taille minimale). La fonction resolve_unfeasible va essayer de fournir une solution faisable à partir d’une solution qui vérifie la contrainte de contiguïté mais pas forcément les contraintes de taille. Prenons par exemple la partition suivante : Celle-ci est composée de 4L clusters. peut vérifier que tous ses clusters sont bien des régions, mais qu’elle ne vérifie pas les contraintes de tailles fixées précédemment. Le premier cluster est trop petit et le quatrième trop grand. resolve_unfeasible va à partir de de régionalisation proposer une solution faisable, en augmentant la taille du premier cluster et en baissant la taille du dernier. La fonction obtenu une solution faisable en réalisant six transferts d’éléments. Tous les contraintes sont désormais respectées. En particulier, la solution est bien une régionalisation :","code":"regInfaisable <-   c(1L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 4L,     4L, 2L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L) is_regionalisation(regInfaisable, contiguite) #> [1] TRUE clusters_sizes(regInfaisable, individus) #>  1  2  3  4  #>  3 31 23 43 set.seed(123L) resolution <- resolve_unfeasible(contiguity = contiguite,                                  sizes = individus,                                  data = data,                                  d = d, m = m, M = M,                                  regionalisation = regInfaisable,                                  verbose = TRUE) #> → Transfert of elements one-by-one #> ✔ fully resolved partition  resolution #> $status #> [1] \"fully_resolved\" #>  #> $itTransfers #> [1] 6 #>  #> $itFusions #> [1] 0 #>  #> $initialSmallRegions #> [1] 1 #>  #> $finalSmallRegions #> NULL #>  #> $initialBigRegions #> [1] 4 #>  #> $finalBigRegions #> NULL #>  #> $resolvedRegions #> [1] 1 4 #>  #> $initialRegionsSizes #>  1  2  3  4  #>  3 31 23 43  #>  #> $finalRegionsSizes #>  1  2  3  4  #>  7 35 23 35  #>  #> $regionalisation #>  [1] 1 1 2 3 3 3 3 3 3 4 4 3 4 3 3 4 4 3 3 3 #>  #> $initialNbClusters #> [1] 4 #>  #> $finalNbClusters #> [1] 4 is_regionalisation(resolution$regionalisation, contiguite) #> [1] TRUE"},{"path":"dzt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tangi Tassin. Author, maintainer. Stéphane Legleye. Thesis advisor.            ensai.fr","code":""},{"path":"dzt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tassin T (2023). “Classification non-supervisée avec contraintes de connexité et de taille.” Réalisé dans le cadre d'un stage de deuxième année au sein de l'école d'ingénieurs Ensai.","code":"@Unpublished{,   title = {Classification non-supervisée avec contraintes de connexité et de taille},   author = {Tangi Tassin},   institution = {Ensai},   year = {2023},   language = {Français},   note = {Réalisé dans le cadre d'un stage de deuxième année au sein de l'école d'ingénieurs Ensai}, }"},{"path":"dzt/index.html","id":"c3t","dir":"","previous_headings":"","what":"Clustering with Connectivity and Size Constraints","title":"Clustering with Connectivity and Size Constraints","text":"goal c3t …","code":""},{"path":"dzt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clustering with Connectivity and Size Constraints","text":"can install development version c3t GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"atero18/c3t\")"},{"path":"dzt/reference/AHCTree_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Access to the partitions of a AHCTree — AHCTree_access","title":"Access to the partitions of a AHCTree — AHCTree_access","text":"Access partitions AHCTree","code":""},{"path":"dzt/reference/AHCTree_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access to the partitions of a AHCTree — AHCTree_access","text":"","code":"# S4 method for AHCTree,logical,ANY,ANY [(x, i)  # S4 method for AHCTree,vector,ANY,ANY [(x, i)  # S4 method for AHCTree,numeric [[(x, i)  # S4 method for AHCTree,character [[(x, i)  # S4 method for AHCTree,missing [[(x, i)"},{"path":"dzt/reference/AHCTree_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access to the partitions of a AHCTree — AHCTree_access","text":"x AHCTree object logical, strictly positive integers character vector.","code":""},{"path":"dzt/reference/AHCTree_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access to the partitions of a AHCTree — AHCTree_access","text":"\"[\", list Partition objects ; \"[[\" Partition object length 1, list Partition objects otherwise.","code":""},{"path":"dzt/reference/AHCTree_check_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Does partitions of a AHCTree verifies constraints? — AHCTree_check_constraints","title":"Does partitions of a AHCTree verifies constraints? — AHCTree_check_constraints","text":"partitions AHCTree verifies constraints?","code":""},{"path":"dzt/reference/AHCTree_check_constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does partitions of a AHCTree verifies constraints? — AHCTree_check_constraints","text":"x AHCTree","code":""},{"path":"dzt/reference/AHCTree_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Properties of a AHCTree object — AHCTree_properties","title":"Properties of a AHCTree object — AHCTree_properties","text":"Properties AHCTree object","code":""},{"path":"dzt/reference/AHCTree_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Properties of a AHCTree object — AHCTree_properties","text":"","code":"# S4 method for AHCTree length(x)  # S4 method for AHCTree names(x)"},{"path":"dzt/reference/AHCTree_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Properties of a AHCTree object — AHCTree_properties","text":"x AHCTree object","code":""},{"path":"dzt/reference/AHCTree_properties.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Properties of a AHCTree object — AHCTree_properties","text":"length(AHCTree): Give number partitions stored tree. (positive integer) names(AHCTree): Give names different partitions stored tree. tree manually modified corresponds number clusters partition.","code":""},{"path":"dzt/reference/AHR.html","id":null,"dir":"Reference","previous_headings":"","what":"Agglomerative Hierarchical Regionalisation (AHR) — AHR","title":"Agglomerative Hierarchical Regionalisation (AHR) — AHR","text":"function performs Agglomerative Hierarchical Clustering (AHC)  given problem regionalisation (contiguity/connectivity constraint) optional size constraints clusters. Multiple iterations AHR can made multiple values given parameters.","code":""},{"path":"dzt/reference/AHR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Agglomerative Hierarchical Regionalisation (AHR) — AHR","text":"","code":"AHR(   distances = NULL,   contiguity = NULL,   sizes = NULL,   d = NULL,   data = NULL,   m = 0,   M = Inf,   standardQuant = FALSE,   binarQual = FALSE,   nbTries = 5L,   propFusionsInit = 0.01,   linkages = \"saut_min\",   fusionConstraints = NA,   fusionConstraintModes = available_fusion_modes(),   splitConnectedComponents = FALSE,   criteria = NULL,   evalLinkages = linkages,   minNbClusters = 2L,   maxNbClusters = Inf,   parallele = TRUE,   nbCores = detectCores() - 1L,   verbose = TRUE )"},{"path":"dzt/reference/AHR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Agglomerative Hierarchical Regionalisation (AHR) — AHR","text":"distances distance matrix problem. can omitted distance function d data context data provided. distances provided, distances must present. (distance matrix) contiguity contiguity matrix igraph contiguity graph. provided, problem considered completely contiguous (elements neighbors ). case solving time might long iteration. sizes Represents size element. default, set 1 element (size cluster becomes cardinal). data must positive zero. (positive real numeric vector) d Distance function elements. can omitted distances already indicated. present, data must also specified. classical distances available, recommended use rather personal function optimisation reasons : \"euclidean\": Euclidean distance. \"manhattan\" : Manhattan distance. \"minkowski\" : Minkowski's distance. case value p >= 1 must specified. (function string) data data.frame row represents data related element. can omitted d omitted. Present variables can quantitative qualitative. qualitative variables present, distances may used. Possibility standardising variables transforming qualitative variables binary variables (one-hot encoding) using standardQuant binarQual. (data.frame) m Minimum size constraint. Must positive zero small enough problem feasible. Default 0 (constraint). (positive number) M Maximum size constraint. Must positive, superior equal m large enough problem feasible. Default Inf (constraint). Multiple values can given different values maximum size constraint must tried. (positive real vector) standardQuant TRUE variables data standardised (.e., centered scaled), FALSE (default) otherwise. Standardisation applied possible binarization qualitative variables (see binarQual). (flag) binarQual TRUE qualitative variables binarized (one-hot encoding), example, make data set compatible common distances standardize variables. FALSE (default) otherwise. (flag) nbTries number initialisations test. first one start single-element partition, remaining ones generated randomly respecting connectivity maximum cluster size constraints. number random fusions perform randomly generated partition determined propFusionsInit. (strictly positive integer) propFusionsInit Proportion fusions (relatively number elements) randomly performed initialisations. Ignored nbTries = 1. Default 1%. (value ]0,1[) linkages vector distance measures tested. Can include function names actual distance functions. measures determine linkage criterion hierarchical clustering. using custom  distance functions, must take pairwise distance matrix argument return linkage distance. Default implemented linkages can seen available_linkages(). fusionConstraints Type constraints add fusions. new fusion must done algorithm choose best fusion term linkage distance respecting constraint. fusion check constraint partial relaxation realized. kind constraint can useful problem minimum size constraint. Multiple values can given. implemented constraints following: FALSE (NA): constraint added \"singletonMin\": fusion cluster one element cluster verify minimum size constraint. \"singletonAny\" : fusion cluster one element cluster \"minMin\" : fusion clusters verify minimum size constraint \"minAny\" : fusion cluster verify minimum size constraint one. (vector) fusionConstraintModes way fusion constraint, supplied fusionConstraints parameters (ignored otherwise) applied. Actually two modes available: \"deterministic\": fusion constraint applied constantly unfeasible. \"random\": fusion constraint applied randomly probability increasing number iterations. Default \"deterministic\". (character vector) splitConnectedComponents flag indicating AHR done independently connected components. can consequently improve calculation time problem connected impact results AHR. TRUE grid realized different connected components return list one element per component. Ignored problem connected. Default FALSE. (flag) criteria vector criteria cluster evaluation calculated end hierarchical clustering. Optional. Use available_criteria() see criteria available. (character vector, possibly NULL) evalLinkages vector linkages used criterion criteria needing parameter. default equal linkages. minNbClusters Minimum number clusters allowed. Default 2. Setting higher value minNbClusters can reduce computation time. (strictly positive integer) maxNbClusters Maximum number clusters allowed. end iteration solutions number cluster inferior value exist, superior number clusters removed. Must superior equal minNbClusters. Can reduce computation time. Default Inf. (strictly positive integer) parallele Logical indicating whether use parallel processing. Default TRUE. nbCores Number CPU cores use parallel processing (sockets method). Default one less detected number cores. verbose Logical indicating whether display progress messages. Default TRUE.","code":""},{"path":"dzt/reference/AHR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Agglomerative Hierarchical Regionalisation (AHR) — AHR","text":"Depending splitConnectedComponents problem connected . splitConnectedComponents = FALSE problem connected, list 3 elements: results: tibble containing partitions given AHR information like  constraint respected. least one feasible solution found return, calculated criteria given criteria. least one criterion given results order quality regarding first criterion. Otherwise every solution returned, ordered size constraint score. grid: different parameters used AHR tibble. initialPartitions: different partitions used first iteration AHRs. Stored tibble. Otherwise list one element per connected component. elements list corresponding return function connected component.","code":""},{"path":[]},{"path":[]},{"path":"dzt/reference/AHR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Agglomerative Hierarchical Regionalisation (AHR) — AHR","text":"","code":"set.seed(123L) grid  <- simple_grid(4L, 5L) data <- grid$context sizes <- grid$repartition$nbIndividuals contiguity <- grid$contiguity  m <- 200.0 M <- 800.0  d <- \"euclidean\"  criterion <- \"CHI\"  AHR(contiguity = contiguity,     d = d, data = data,     sizes = sizes,     m = m, M = M,     criteria = criterion,     nbTries = 1L,     fusionConstraints = available_fusion_constraints(),     fusionConstraintModes = available_fusion_modes(),     parallele = FALSE) #> ℹ Starting time: 2023-09-14 10:25:51.759113 #> ℹ 9 AHC to evaluate #> → 118 non-trivial regionalisations obtained #> ✔ 7 feasable partitions obtained #> → Calculation of the CHI criterion #> → Execution time: 1.6743950843811 #> $grid #> # A tibble: 9 × 9 #>   idExp linkage minNbClusters idpartitionInit fusionConstraint #>   <int> <chr>           <int>           <int> <chr>            #> 1     1 Single              2               1 NA               #> 2     2 Single              2               1 singletonMin     #> 3     3 Single              2               1 singletonMin     #> 4     4 Single              2               1 singletonAny     #> 5     5 Single              2               1 singletonAny     #> 6     6 Single              2               1 minMin           #> 7     7 Single              2               1 minMin           #> 8     8 Single              2               1 NaN              #> 9     9 Single              2               1 NaN              #> # ℹ 4 more variables: fusionConstraintMode <chr>, m <dbl>, M <dbl>, #> #   contiguity <lgl> #>  #> $initialPartitions #> # A tibble: 1 × 4 #>   idpartitionInit partitionInit mode    nbFusions #>             <int> <named list>  <chr>       <dbl> #> 1               1 <int [20]>    unitary         0 #>  #> $results #> # A tibble: 7 × 11 #>   method idExp partition    nbClusters checkContiguityConst checkMinSizeConst #>   <chr>  <int> <named list>      <int> <lgl>                <lgl>             #> 1 AHR        2 <int [20]>            3 TRUE                 TRUE              #> 2 AHR        2 <int [20]>            4 TRUE                 TRUE              #> 3 AHR        2 <int [20]>            5 TRUE                 TRUE              #> 4 AHR        3 <int [20]>            3 TRUE                 TRUE              #> 5 AHR        3 <int [20]>            4 TRUE                 TRUE              #> 6 AHR        3 <int [20]>            6 TRUE                 TRUE              #> 7 AHR        3 <int [20]>            5 TRUE                 TRUE              #> # ℹ 5 more variables: checkMaxSizeConst <lgl>, scoreMinSizeConst <dbl>, #> #   scoreMaxSizeConst <dbl>, scoreSizeConsts <dbl>, CHI <dbl> #>"},{"path":"dzt/reference/Partition_list_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list of partitions to a tibble — Partition_list_to_tibble","title":"Convert a list of partitions to a tibble — Partition_list_to_tibble","text":"Convert list partitions tibble","code":""},{"path":"dzt/reference/Partition_list_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list of partitions to a tibble — Partition_list_to_tibble","text":"","code":"Partition_list_to_tibble(partitions)"},{"path":"dzt/reference/Partition_list_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list of partitions to a tibble — Partition_list_to_tibble","text":"partitions list Partition objects.","code":""},{"path":"dzt/reference/Partition_list_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list of partitions to a tibble — Partition_list_to_tibble","text":"tibble containing information partition.","code":""},{"path":"dzt/reference/abstractSymMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Class: AbstractSymMat — abstractSymMat","title":"Abstract Class: AbstractSymMat — abstractSymMat","text":"class handling storage symmetric square matrix.","code":""},{"path":"dzt/reference/abstractSymMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class: AbstractSymMat — abstractSymMat","text":"x, object AbrastSymMat object","code":""},{"path":"dzt/reference/abstractSymMat.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Abstract Class: AbstractSymMat — abstractSymMat","text":"dim dimension square matrix (numeric). names vector storing names rows columns (vector). defaultDiag default values diagonal elements (numericOrLogicalOrNULL).","code":""},{"path":"dzt/reference/abstractSymMat_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Access to AbstractSymMat data` — abstractSymMat_access","title":"Access to AbstractSymMat data` — abstractSymMat_access","text":"Rules following: rows columns given submatrix returned asked rows columns rows (resp. columns given) submatrix return asked rows (resp. columns) entire columns (resp. rows) rows columns missing entire matrix sent back. Depending drop (flag) one row / one column given result simplified vector form .","code":""},{"path":"dzt/reference/abstractSymMat_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access to AbstractSymMat data` — abstractSymMat_access","text":"","code":"# S4 method for AbstractSymMat,numeric,missing,ANY [(x, i, j, drop)  # S4 method for AbstractSymMat,missing,numeric,ANY [(x, i, j, drop)  # S4 method for AbstractSymMat,missing,missing,ANY [(x, i, j, drop)  # S4 method for SymMMat,matrix,missing,ANY [(x, i, j, drop)  # S4 method for SymMMat,numeric,numeric,ANY [(x, i, j, drop)  # S4 method for SymVMat,matrix,missing,ANY [(x, i, j, drop)  # S4 method for SymVMat,numeric,numeric,ANY [(x, i, j, drop)"},{"path":"dzt/reference/abstractSymMat_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access to AbstractSymMat data` — abstractSymMat_access","text":"x AbstractSymMat inheriting object vector composed indices wished rows. j vector composed indices wished columns","code":""},{"path":"dzt/reference/abstractSymMat_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access to AbstractSymMat data` — abstractSymMat_access","text":"Depending drop dimensions j, matrix vector.","code":""},{"path":"dzt/reference/abstractSymMat_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Access properties of a AbstractSymMat object or subclasses — abstractSymMat_properties","title":"Access properties of a AbstractSymMat object or subclasses — abstractSymMat_properties","text":"Access properties AbstractSymMat object subclasses integers vector)","code":""},{"path":"dzt/reference/abstractSymMat_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access properties of a AbstractSymMat object or subclasses — abstractSymMat_properties","text":"","code":"# S4 method for AbstractSymMat names(x)  # S4 method for AbstractSymMat length(x)  # S4 method for AbstractSymMat dim(x)  # S4 method for AbstractSymMat nrow(x)  # S4 method for AbstractSymMat ncol(x)  # S4 method for AbstractSymMat isSymmetric(object, ...)  # S4 method for AbstractSymMat is.matrix(x)  # S4 method for DistMat names(x)  # S4 method for DistMat length(x)  # S4 method for DistMat dim(x)  # S4 method for DistMat nrow(x)  # S4 method for DistMat ncol(x)  # S4 method for DistMat isSymmetric(object, ...)  # S4 method for DistMat is.matrix(x)  # S4 method for DistMat is.numeric(x)"},{"path":"dzt/reference/abstractSymMat_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access properties of a AbstractSymMat object or subclasses — abstractSymMat_properties","text":"x AbstractSymMat object.","code":""},{"path":"dzt/reference/abstractSymMat_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access properties of a AbstractSymMat object or subclasses — abstractSymMat_properties","text":"isSymmetric : always TRUE AbstractSymMat symmetric. .matrix : always TRUE AbstractSymMat matrix.","code":""},{"path":"dzt/reference/abstractSymMat_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace value of a AbstractSymMat object or subclasses — abstractSymMat_replace","title":"Replace value of a AbstractSymMat object or subclasses — abstractSymMat_replace","text":"AbstractSymMat symmetrical replacing values position (,j) automatically set value position (j,).","code":""},{"path":"dzt/reference/abstractSymMat_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace value of a AbstractSymMat object or subclasses — abstractSymMat_replace","text":"","code":"# S4 method for pbCon,matrix,missing,numeric [(x, i, j) <- value  # S4 method for SymMMat,numeric,numeric,numeric [(x, i, j) <- value  # S4 method for SymMMat,numeric,missing,numeric [(x, i, j) <- value  # S4 method for SymMMat,missing,numeric,numeric [(x, i, j) <- value  # S4 method for SymMMat,matrix,missing,numeric [(x, i, j) <- value  # S4 method for SymMMat,missing,missing,matrix [(x, i, j) <- value  # S4 method for SymVMat,numeric,numeric,numeric [(x, i, j) <- value  # S4 method for SymVMat,matrix,missing,numeric [(x, i, j) <- value"},{"path":"dzt/reference/abstractSymMat_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace value of a AbstractSymMat object or subclasses — abstractSymMat_replace","text":"x AbstractSymMat object subclasses , j strictly positive integers vectors giving position elements (rows columns j) replaced. matrix supposed one row corresponds one element (first column row second column column). 0, 1 can missing. values vector values replace elements x. j missing can matrix.","code":""},{"path":"dzt/reference/abstractSymMat_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace value of a AbstractSymMat object or subclasses — abstractSymMat_replace","text":"updated object x, even modifications made place.","code":""},{"path":"dzt/reference/abstractSymMat_replace_diag.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace diagonal values of a AbstractSymMat object or subclasses — abstractSymMat_replace_diag","title":"Replace diagonal values of a AbstractSymMat object or subclasses — abstractSymMat_replace_diag","text":"Replace diagonal values AbstractSymMat object subclasses","code":""},{"path":"dzt/reference/abstractSymMat_replace_diag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace diagonal values of a AbstractSymMat object or subclasses — abstractSymMat_replace_diag","text":"","code":"# S4 method for DistMat diag(x) <- value  # S4 method for SymVMat diag(x) <- value"},{"path":"dzt/reference/abstractSymMat_replace_diag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace diagonal values of a AbstractSymMat object or subclasses — abstractSymMat_replace_diag","text":"x AbstractSymMat object subclasses value 1 nrow(x) length vector","code":""},{"path":"dzt/reference/abstractSymMat_replace_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace the names of elements in an AbstractSymMat or subclasses — abstractSymMat_replace_name","title":"Replace the names of elements in an AbstractSymMat or subclasses — abstractSymMat_replace_name","text":"Replace names elements AbstractSymMat subclasses","code":""},{"path":"dzt/reference/abstractSymMat_replace_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace the names of elements in an AbstractSymMat or subclasses — abstractSymMat_replace_name","text":"","code":"# S4 method for AbstractSymMat,vector names(x) <- value"},{"path":"dzt/reference/abstractSymMat_replace_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace the names of elements in an AbstractSymMat or subclasses — abstractSymMat_replace_name","text":"x AbstractSymMat (subclasses) object. value vector names assigned rows columns.","code":""},{"path":"dzt/reference/abstractSymMat_replace_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace the names of elements in an AbstractSymMat or subclasses — abstractSymMat_replace_name","text":"updated object.","code":""},{"path":"dzt/reference/anyNA-AbstractSymMat-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Is there any NA is our symmetric matrix? — anyNA,AbstractSymMat-method","title":"Is there any NA is our symmetric matrix? — anyNA,AbstractSymMat-method","text":"NA symmetric matrix?","code":""},{"path":"dzt/reference/anyNA-AbstractSymMat-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is there any NA is our symmetric matrix? — anyNA,AbstractSymMat-method","text":"","code":"# S4 method for AbstractSymMat anyNA(x)"},{"path":"dzt/reference/anyNA-AbstractSymMat-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is there any NA is our symmetric matrix? — anyNA,AbstractSymMat-method","text":"x AbstractSymMat object.","code":""},{"path":"dzt/reference/anyNA-AbstractSymMat-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is there any NA is our symmetric matrix? — anyNA,AbstractSymMat-method","text":"Logical value indicating NA values present AbstractSymMat object.","code":""},{"path":"dzt/reference/arguments_distMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for creating a DistMat object — arguments_distMat","title":"Constructor function for creating a DistMat object — arguments_distMat","text":"Constructor function creating DistMat object","code":""},{"path":"dzt/reference/arguments_distMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for creating a DistMat object — arguments_distMat","text":"","code":"constructor_DistMat(   distances = NULL,   d = NULL,   data = NULL,   standardQuant = FALSE,   binarQual = FALSE,   storageMode = \"vector\",   names = NULL,   p = 2L )"},{"path":"dzt/reference/arguments_distMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor function for creating a DistMat object — arguments_distMat","text":"distances distance matrix problem. can omitted distance function d data context data provided. distances provided, distances must present. (distance matrix) d Distance function elements. can omitted distances already indicated. present, data must also specified. classical distances available, recommended use rather personal function optimisation reasons : \"euclidean\": Euclidean distance. \"manhattan\" : Manhattan distance. \"minkowski\" : Minkowski's distance. case value p >= 1 must specified. (function string) data data.frame row represents data related element. can omitted d omitted. Present variables can quantitative qualitative. qualitative variables present, distances may used. Possibility standardising variables transforming qualitative variables binary variables (one-hot encoding) using standardQuant binarQual. (data.frame) standardQuant TRUE variables data standardised (.e., centered scaled), FALSE (default) otherwise. Standardisation applied possible binarization qualitative variables (see binarQual). (flag) binarQual TRUE qualitative variables binarized (one-hot encoding), example, make data set compatible common distances standardize variables. FALSE (default) otherwise. (flag) storageMode Indicates distance data stored. modify now. (string) names character vector names elements distance matrix. p integer value Minkowski distance parameter.","code":""},{"path":"dzt/reference/arguments_distMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor function for creating a DistMat object — arguments_distMat","text":"DistMat object representing distance matrix.","code":""},{"path":"dzt/reference/articulation_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Find articulation points — articulation_points","title":"Find articulation points — articulation_points","text":"find articulation points partition.","code":""},{"path":"dzt/reference/articulation_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find articulation points — articulation_points","text":"","code":"articulation_pts_cluster(contiguity, partition, cluster)  articulation_pts_clusters(   contiguity,   partition,   clusters = clustersIDs(partition) )"},{"path":"dzt/reference/articulation_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find articulation points — articulation_points","text":"contiguity contiguity matrix contiguity graph (package igraph). (contiguity matrix igraph graph) partition partition. is_articulation_pt_cluster, must regionalisation. (vector strictly positive integers) cluster cluster identifier, empty partition. (strictly positive integer) clusters List non-empty clusters partition determine articulation point(s). Default clusters.","code":""},{"path":"dzt/reference/articulation_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find articulation points — articulation_points","text":"vector composed indices elements articulation points. (vector strictly positive integers) articulation_pts_clusters vector composed indices elements clusters clusters articulation points. (vector strictly positive integers)","code":""},{"path":"dzt/reference/articulation_points.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Find articulation points — articulation_points","text":"articulation_pts_cluster(): Returns list articulation points cluster resulting partition. articulation_pts_clusters(): Returns list points articulation points different clusters.","code":""},{"path":[]},{"path":"dzt/reference/available_criteria.html","id":null,"dir":"Reference","previous_headings":"","what":"Available clustering criteria — available_criteria","title":"Available clustering criteria — available_criteria","text":"Give criteria available actually.","code":""},{"path":"dzt/reference/available_criteria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available clustering criteria — available_criteria","text":"","code":"available_criteria()"},{"path":"dzt/reference/available_criteria.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Available clustering criteria — available_criteria","text":"Silhouette score available cluster package installed.","code":""},{"path":[]},{"path":"dzt/reference/available_elements_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"What elements distances are already implemented? — available_elements_distances","title":"What elements distances are already implemented? — available_elements_distances","text":"elements distances already implemented?","code":""},{"path":"dzt/reference/available_elements_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What elements distances are already implemented? — available_elements_distances","text":"","code":"available_elements_distances()"},{"path":[]},{"path":"dzt/reference/available_fusion_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Available fusion constraints — available_fusion_constraints","title":"Available fusion constraints — available_fusion_constraints","text":"parameters available fusion constraints?","code":""},{"path":"dzt/reference/available_fusion_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available fusion constraints — available_fusion_constraints","text":"","code":"available_fusion_constraints()  available_fusion_modes()"},{"path":"dzt/reference/available_fusion_constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available fusion constraints — available_fusion_constraints","text":"character vector available choices.","code":""},{"path":"dzt/reference/available_fusion_constraints.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Available fusion constraints — available_fusion_constraints","text":"available_fusion_constraints(): return implemented fusion constraints. available_fusion_modes(): return implemented fusion constraint modes.","code":""},{"path":[]},{"path":"dzt/reference/available_linkages.html","id":null,"dir":"Reference","previous_headings":"","what":"What linkages are available? — available_linkages","title":"What linkages are available? — available_linkages","text":"Give list implemented linkages.","code":""},{"path":"dzt/reference/available_linkages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What linkages are available? — available_linkages","text":"","code":"available_linkages(description = FALSE)"},{"path":"dzt/reference/available_linkages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"What linkages are available? — available_linkages","text":"description flag indicating description implemented linkages printed.","code":""},{"path":"dzt/reference/available_linkages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What linkages are available? — available_linkages","text":"character vector containing names implemented linkages. description = TRUE return bade invisibly.","code":""},{"path":[]},{"path":"dzt/reference/c3t-package.html","id":null,"dir":"Reference","previous_headings":"","what":"c3t: Clustering with Connectivity and Size Constraints — c3t-package","title":"c3t: Clustering with Connectivity and Size Constraints — c3t-package","text":"Enable clustering connectivity (regionalization) /minimum-maximum size constraints. also provides algorithm attempt making regionalization feasible (respecting size constraints) another enhance feasible solution.","code":""},{"path":[]},{"path":"dzt/reference/c3t-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"c3t: Clustering with Connectivity and Size Constraints — c3t-package","text":"Maintainer: Tangi Tassin tangi.tassin@outlook.fr (ORCID) contributors: Stéphane Legleye (ensai.fr) [thesis advisor]","code":""},{"path":"dzt/reference/calinski_harabasz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calinski-Harabasz Index (CHI / ICH) — calinski_harabasz","title":"Calinski-Harabasz Index (CHI / ICH) — calinski_harabasz","text":"Methods determine value Calinski-Harabasz Index partition elements variable(s) compatible euclidean distance. index defined variance divided within variance, divided degree liberty. Depending valueOnly, value returned calinski_harabasz index list data. can useful instance update index change instead start beginning.","code":""},{"path":"dzt/reference/calinski_harabasz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calinski-Harabasz Index (CHI / ICH) — calinski_harabasz","text":"","code":"calinski_harabasz(data, partition, valueOnly = TRUE)"},{"path":"dzt/reference/calinski_harabasz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calinski-Harabasz Index (CHI / ICH) — calinski_harabasz","text":"data data frame one row per element, containing context. variable included must compatible euclidean distance (quantitative) CHI use variance. partition partition problem: vector length equal number rows data. valueOnly TRUE value needed index. FALSE user wants information.","code":""},{"path":"dzt/reference/calinski_harabasz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calinski-Harabasz Index (CHI / ICH) — calinski_harabasz","text":"Depends valueOnly. valueOnly = TRUE, returns Calinski-Harabasz index (positive double value). valueOnly = FALSE, returns list containing following elements: \"k\": number clusters partition (strictly positive integer) \"nbElementsClusters\": strictly positive integers vector size k giving number elements cluster. \"withinClusters\": positive double vector size k containing within sum squares cluster. \"W\": within sum squares partition, .e. sum empirical cluster variances weighted number elements clusters. (positive real value) \"betweenClusters\": positive double vector size k containing cluster square euclidean norm global centroid (.e. ||c_i - c||²) \"B\" : sum squares partition, .e. sum square euclidean norm given \"betweenClusters\" weighted number elements cluster. \"CHI\" : Calinski-Harabasz Index (positive real value)","code":""},{"path":"dzt/reference/calinski_harabasz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calinski-Harabasz Index (CHI / ICH) — calinski_harabasz","text":"special cases can considered: n = 1 : one possible partition optimal definition. Hence take CHI = Inf. k = 1: unique cluster partition entire set. sum squares (B) considered equal 0. index formula B divided k-1 equals 0 . Except n = 1 partition interest assign CHI = 0. k = n : cluster made one element. Consequently empirical biased variance cluster equal 0, W. index formula W divided n - k equal 0 . case compactness optimal separation worth. index set NaN.","code":""},{"path":"dzt/reference/calinski_harabasz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calinski-Harabasz Index (CHI / ICH) — calinski_harabasz","text":"Calinski, T., Harabasz, J. (1974) Dendrite Method Cluster Analysis, Communications Statistics, 3, 1-27.","code":""},{"path":[]},{"path":"dzt/reference/checkCharacterSubset.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a subset of a character vector — checkCharacterSubset","title":"Check if an argument is a subset of a character vector — checkCharacterSubset","text":"Check argument subset character vector","code":""},{"path":"dzt/reference/checkCharacterSubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a subset of a character vector — checkCharacterSubset","text":"","code":"checkCharacterSubset(   x,   choices,   keepCase = FALSE,   keepAccents = FALSE,   len = NULL,   empty.ok = FALSE )  assertCharacterSubset(   x,   choices,   keepCase = FALSE,   keepAccents = FALSE,   len = NULL,   empty.ok = FALSE,   .var.name = checkmate::vname(x),   add = NULL )  testCharacterSubset(   x,   choices,   keepCase = FALSE,   keepAccents = FALSE,   len = NULL,   empty.ok = FALSE )  checkStringChoice(x, choices, keepCase = FALSE, keepAccents = FALSE)  assertStringChoice(   x,   choices,   keepCase = FALSE,   keepAccents = FALSE,   .var.name = checkmate::vname(x),   add = NULL )  testStringChoice(x, choices, keepCase = FALSE, keepAccents = FALSE)"},{"path":"dzt/reference/checkCharacterSubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a subset of a character vector — checkCharacterSubset","text":"x argument tested. choices non-empty character vectors x supposed come. keepCase TRUE case must maintained. FALSE (default) letter x strings lowered, well choices. keepAccents TRUE accents must maintained. FALSE (default) accents removed x choices strings. len integer indicating size x supposed . Default NULL (verification made). .var.name Name checked object print assertions. Defaults heuristic implemented checkmate::vname().","code":""},{"path":"dzt/reference/checkCharacterSubset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a subset of a character vector — checkCharacterSubset","text":"Please see checkmate::checkMatrix() help page (instance) details difference check_, test_ assert_ functions results.","code":""},{"path":"dzt/reference/checkCharacterSubset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a subset of a character vector — checkCharacterSubset","text":"Main differences checkmate::checkSubset() specific characters allow comparison decide case accents must considered.","code":""},{"path":"dzt/reference/checkCharacterSubset.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Check if an argument is a subset of a character vector — checkCharacterSubset","text":"checkStringChoice(): Shortcut len = 1L, .e. x must one element choices.","code":""},{"path":"dzt/reference/checkContiguityGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a contiguity graph — checkContiguityGraph","title":"Check if an argument is a contiguity graph — checkContiguityGraph","text":"Check argument ìgraph object igraph package contiguity graph properties, .e. simple undirected.","code":""},{"path":"dzt/reference/checkContiguityGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a contiguity graph — checkContiguityGraph","text":"","code":"checkContiguityGraph(g, n = gorder(g))  assertContiguityGraph(   g,   n = gorder(g),   .var.name = checkmate::vname(g),   add = NULL )  testContiguityGraph(g, n = gorder(g))"},{"path":"dzt/reference/checkContiguityGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a contiguity graph — checkContiguityGraph","text":"g argument try. n order (number vertices) g supposed . default number arbitrary. .var.name Name checked object print assertions. Defaults heuristic implemented checkmate::vname(). add Collection store assertion messages. See checkmate::AssertCollection.","code":""},{"path":"dzt/reference/checkContiguityGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a contiguity graph — checkContiguityGraph","text":"Please see checkmate::checkMatrix() help page (instance) details difference check_, test_ assert_ functions results.","code":""},{"path":"dzt/reference/checkContiguityGraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a contiguity graph — checkContiguityGraph","text":"Extension checkmate package.","code":""},{"path":[]},{"path":"dzt/reference/checkContiguityGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a contiguity graph — checkContiguityGraph","text":"","code":"require(igraph) #> Loading required package: igraph #>  #> Attaching package: ‘igraph’ #> The following object is masked from ‘package:c3t’: #>  #>     is_connected #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union  graph <- make_graph(c(1, 2, 2, 3, 3, 1), directed = FALSE)  checkContiguityGraph(graph) # TRUE #> [1] TRUE"},{"path":"dzt/reference/checkContiguityMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a contiguity matrix — checkContiguityMatrix","title":"Check if an argument is a contiguity matrix — checkContiguityMatrix","text":"Check argument matrix contiguity matrix properties.","code":""},{"path":"dzt/reference/checkContiguityMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a contiguity matrix — checkContiguityMatrix","text":"","code":"checkContiguityMatrix(   x,   isComplete = TRUE,   any.missing = FALSE,   all.missing = FALSE,   nrows = NULL,   ncols = nrows )  assertContiguityMatrix(   x,   isComplete = TRUE,   any.missing = FALSE,   all.missing = FALSE,   nrows = NULL,   ncols = nrows,   .var.name = checkmate::vname(x),   add = NULL )  testContiguityMatrix(   x,   isComplete = TRUE,   any.missing = FALSE,   all.missing = FALSE,   nrows = NULL,   ncols = nrows )"},{"path":"dzt/reference/checkContiguityMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a contiguity matrix — checkContiguityMatrix","text":"x Matrix tested isComplete flag set TRUE x supposed distance matrix complete set, .e. must symmetric 0 diagonal (can NA .missing = TRUE). .missing missing values allowed? Default FALSE. .missing matrices missing values allowed? Default FALSE. nrows, ncols exact number rows columns. NULL check ignored. isComplete TRUE nrows must equals ncols .var.name Name checked object print assertions. Defaults heuristic implemented checkmate::vname(). add Collection store assertion messages. See checkmate::AssertCollection.","code":""},{"path":"dzt/reference/checkContiguityMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a contiguity matrix — checkContiguityMatrix","text":"Please see checkmate::checkMatrix() help page (instance) details difference check_, test_ assert_ functions results.","code":""},{"path":"dzt/reference/checkContiguityMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a contiguity matrix — checkContiguityMatrix","text":"Extension checkmate package.","code":""},{"path":[]},{"path":"dzt/reference/checkContiguityMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a contiguity matrix — checkContiguityMatrix","text":"","code":"M <- matrix(c(FALSE,  TRUE, FALSE,               TRUE, FALSE,  TRUE,               FALSE,  TRUE, FALSE), nrow = 3L) checkContiguityMatrix(M, isComplete = TRUE) #> [1] TRUE"},{"path":"dzt/reference/checkCriteria.html","id":null,"dir":"Reference","previous_headings":"","what":"Checking is an argument is a criterion\nCheck if an argument is a correct clustering criterion. — checkCriteria","title":"Checking is an argument is a criterion\nCheck if an argument is a correct clustering criterion. — checkCriteria","text":"Checking argument criterion Check argument correct clustering criterion.","code":""},{"path":"dzt/reference/checkCriteria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checking is an argument is a criterion\nCheck if an argument is a correct clustering criterion. — checkCriteria","text":"","code":"checkCriteria(criteria, unique = FALSE)  assertCriteria(   criteria,   unique = FALSE,   .var.name = checkmate::vname(criteria),   add = NULL )  testCriteria(criteria, unique = FALSE)  checkCriterion(criterion)  assertCriterion(criterion, .var.name = checkmate::vname(criterion), add = NULL)  testCriterion(criterion)  checkCompatibleCriteria(   criteria,   distances = NULL,   d = NULL,   data = NULL,   linkage = NULL,   unique = FALSE )  assertCompatibleCriteria(   criteria,   distances = NULL,   d = NULL,   data = NULL,   linkage = NULL,   unique = FALSE,   .var.name = checkmate::vname(criteria),   add = NULL )  testCompatibleCriteria(   criteria,   distances = NULL,   d = NULL,   data = NULL,   linkage = NULL,   unique = FALSE )  checkCompatibleCriterion(   criterion,   distances = NULL,   d = NULL,   data = NULL,   linkage = NULL )  assertCompatibleCriterion(   criterion,   distances = NULL,   d = NULL,   data = NULL,   linkage = NULL,   .var.name = checkmate::vname(criterion),   add = NULL )  testCompatibleCriterion(   criterion,   distances = NULL,   d = NULL,   data = NULL,   linkage = NULL )"},{"path":"dzt/reference/checkCriteria.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checking is an argument is a criterion\nCheck if an argument is a correct clustering criterion. — checkCriteria","text":".var.name Name checked object print assertions. Defaults heuristic implemented checkmate::vname(). add Collection store assertion messages. See checkmate::AssertCollection.","code":""},{"path":"dzt/reference/checkCriteria.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checking is an argument is a criterion\nCheck if an argument is a correct clustering criterion. — checkCriteria","text":"Please see checkmate::checkMatrix() help page (instance) details difference check_, test_ assert_ functions results.","code":""},{"path":"dzt/reference/checkCriteria.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checking is an argument is a criterion\nCheck if an argument is a correct clustering criterion. — checkCriteria","text":"Extension checkmate package.","code":""},{"path":"dzt/reference/checkCriteria.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Checking is an argument is a criterion\nCheck if an argument is a correct clustering criterion. — checkCriteria","text":"checkCriteria(): Check criteria actually available checkCriterion(): Check ONE criterion actually available checkCompatibleCriteria(): Check criteria compatible given data.","code":""},{"path":"dzt/reference/checkDistanceMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a distance matrix — checkDistanceMatrix","title":"Check if an argument is a distance matrix — checkDistanceMatrix","text":"Check argument distance matrix","code":""},{"path":"dzt/reference/checkDistanceMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a distance matrix — checkDistanceMatrix","text":"","code":"checkDistanceMatrix(   x,   isComplete = TRUE,   any.missing = FALSE,   all.missing = FALSE )  assertDistanceMatrix(   x,   isComplete = TRUE,   any.missing = FALSE,   all.missing = FALSE,   .var.name = checkmate::vname(x),   add = NULL )  testDistanceMatrix(   x,   isComplete = TRUE,   any.missing = FALSE,   all.missing = FALSE )"},{"path":"dzt/reference/checkDistanceMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a distance matrix — checkDistanceMatrix","text":"x Matrix tested isComplete flag set TRUE x supposed distance matrix complete set, .e. must symmetric 0 diagonal (can NA .missing = TRUE). .missing missing values allowed? Default FALSE. .missing matrices missing values allowed? Default FALSE. .var.name Name checked object print assertions. Defaults heuristic implemented checkmate::vname(). add Collection store assertion messages. See checkmate::AssertCollection.","code":""},{"path":"dzt/reference/checkDistanceMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a distance matrix — checkDistanceMatrix","text":"Please see checkmate::checkMatrix() help page (instance) details difference check_, test_ assert_ functions results.","code":""},{"path":"dzt/reference/checkDistanceMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a distance matrix — checkDistanceMatrix","text":"Extension checkmate package.","code":""},{"path":[]},{"path":"dzt/reference/checkDistanceMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a distance matrix — checkDistanceMatrix","text":"","code":"M <- matrix(c(0.0, 1.0, 2.3,               1.0, 0.0, 3.2,               2.3, 3.2, 0.0), nrow = 3L)  checkDistanceMatrix(M, isComplete = TRUE) #> [1] TRUE"},{"path":"dzt/reference/checkPartition.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a partition — checkPartition","title":"Check if an argument is a partition — checkPartition","text":"partition Partition object non-empty integer-ish vector missing values.","code":""},{"path":"dzt/reference/checkPartition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a partition — checkPartition","text":"","code":"checkPartition(x, n = length(x))  assertPartition(x, n = length(x), .var.name = checkmate::vname(x), add = NULL)  testPartition(x, n = length(x))"},{"path":"dzt/reference/checkPartition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a partition — checkPartition","text":"x Argument tested n expected length partition. .var.name Name checked object print assertions. Defaults heuristic implemented checkmate::vname(). add Collection store assertion messages. See checkmate::AssertCollection.","code":""},{"path":"dzt/reference/checkPartition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a partition — checkPartition","text":"Please see checkmate::checkMatrix() help page (instance) details difference check_, test_ assert_ functions results.","code":""},{"path":"dzt/reference/checkPartition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a partition — checkPartition","text":"Extension checkmate package.","code":""},{"path":[]},{"path":"dzt/reference/checkPartition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a partition — checkPartition","text":"","code":"checkPartition(c(1, 2, 3, 1)) #> [1] TRUE checkPartition(matrix(1L:4L, nrow = 2L)) #> [1] \"argument must be a Partition object or a vector\""},{"path":"dzt/reference/checkRegionalisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a regionalisation — checkRegionalisation","title":"Check if an argument is a regionalisation — checkRegionalisation","text":"regionalisation partition clusters connected (one connected component ), regarding contiguity relation.","code":""},{"path":"dzt/reference/checkRegionalisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a regionalisation — checkRegionalisation","text":"","code":"checkRegionalisation(regionalisation, contiguity)  assertRegionalisation(   regionalisation,   contiguity,   .var.name = checkmate::vname(regionalisation),   add = NULL )  testRegionalisation(regionalisation, contiguity)"},{"path":"dzt/reference/checkRegionalisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a regionalisation — checkRegionalisation","text":"regionalisation argument check. contiguity contiguity matrix contiguity graph (igraph). .var.name Name checked object print assertions. Defaults heuristic implemented checkmate::vname(). add Collection store assertion messages. See checkmate::AssertCollection.","code":""},{"path":"dzt/reference/checkRegionalisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a regionalisation — checkRegionalisation","text":"Please see checkmate::checkMatrix() help page (instance) details difference check_, test_ assert_ functions results.","code":""},{"path":"dzt/reference/checkRegionalisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a regionalisation — checkRegionalisation","text":"Extension checkmate package.","code":""},{"path":[]},{"path":"dzt/reference/checkRegionalisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a regionalisation — checkRegionalisation","text":"","code":"contiguity <- simple_grid(3L, 2L)$contiguity  regionalisation <- c(1L, 1L, 1L,                      2L, 2L, 2L)  checkRegionalisation(regionalisation, contiguity) # TRUE #> [1] TRUE  notRegionalisation <- c(1L, 2L, 1L,                         1L, 2L, 1L)  checkRegionalisation(notRegionalisation, contiguity) # message #> [1] \"at least one cluster is not connected\""},{"path":"dzt/reference/check_solution.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a partition checking constraints? — is_feasible_solution","title":"Is a partition checking constraints? — is_feasible_solution","text":"partition checking constraints?","code":""},{"path":"dzt/reference/check_solution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a partition checking constraints? — is_feasible_solution","text":"","code":"is_feasible_solution(   partition,   contiguity = NULL,   sizes = rep(1L, length(partition)),   m = 0,   M = Inf )  is_regionalisation(partition, contiguity)"},{"path":"dzt/reference/check_solution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a partition checking constraints? — is_feasible_solution","text":"partition Partition vector set (numeric vector composed non-null integers). contiguity contiguity matrix graph. NULL contiguity constraint considered. sizes sizes elements (positive values) m, M minimum maximum size constraints. (positive values)","code":""},{"path":"dzt/reference/check_solution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a partition checking constraints? — is_feasible_solution","text":"flag equals TRUE partition check requested constraints, FALSE otherwise.","code":""},{"path":"dzt/reference/check_solution.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Is a partition checking constraints? — is_feasible_solution","text":"is_feasible_solution(): Verifies partition check connectivity size constraints is_regionalisation(): Verifies classes set connected.","code":""},{"path":"dzt/reference/clustering_criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluating quality of partitions — clustering_criterion","title":"Evaluating quality of partitions — clustering_criterion","text":"function allow evaluate internal clustering criteria one several partitions. Connectivity can taken account reduce impact contiguity / connectivity constraint.","code":""},{"path":"dzt/reference/clustering_criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluating quality of partitions — clustering_criterion","text":"","code":"clustering_criterion(   partitions,   criterion,   distances = NULL,   d = NULL,   data = NULL,   standardQuant = FALSE,   binarQual = FALSE,   linkage = NULL,   contiguity = NULL,   connected = FALSE,   ... )"},{"path":"dzt/reference/clustering_criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluating quality of partitions — clustering_criterion","text":"partitions partition list partitions set criterion calculated . (vector list vectors) criterion one available criterion. Use available_criteria() see criterion can applied. (string) distances distance matrix problem. can omitted distance function d data context data provided. distances provided, distances must present. (distance matrix) d Distance function elements. criteria require value .present, data must also specified. classical distances available, recommended use rather personal function optimization reasons : \"euclidean\": euclidean distance. \"manhattan\" : manhattan distance. \"minkowski\" : minkowski distance. case value p >= 1 must specified. (function string) data data.frame row represents data related element. can omitted d omitted, might necessary criteria (e.g. Calinski-Harabasz). present variables can quantitative qualitative. qualitative variables present, distances criteria may used. Possibility standardising variables transforming qualitative variables binary variables (one-hot encoding) using standardQuant binarQual. (data.frame) standardQuant TRUE variables data standardised (.e., centered scaled), FALSE (default) otherwise. Standardisation applied possible binarization qualitative variables (see binarQual). (flag) binarQual TRUE qualitative variables binarized (one-hot encoding), example, make data set compatible common distances standardize variables. FALSE (default) otherwise. (flag) linkage distance linkage. Can string (see available_linkages()) user function. Used criteria (e.g. Dunn). contiguity contiguity matrix igraph contiguity graph. provided, problem considered completely contiguous (elements neighbors ). connected flag equals TRUE criterion calculated connected form, .e. mean value connected component. ... Arguments specific criterion.","code":""},{"path":[]},{"path":"dzt/reference/clusters_contiguity_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List Contiguous Classes — clusters_contiguity_list","title":"List Contiguous Classes — clusters_contiguity_list","text":"Function returning set contiguous classes problem.","code":""},{"path":"dzt/reference/clusters_contiguity_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Contiguous Classes — clusters_contiguity_list","text":"","code":"clusters_contiguity_list(partition, x)  clusters_contiguity_matrix(partition, elemsContiguity, diag = FALSE)"},{"path":"dzt/reference/clusters_contiguity_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Contiguous Classes — clusters_contiguity_list","text":"partition Partition vector. Must numeric, containing integers, non-empty. (numeric vector) x contiguity matrix contiguity graph. number elements matrix/graph correspond size partition. (matrix / contiguity graph)","code":""},{"path":"dzt/reference/clusters_contiguity_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Contiguous Classes — clusters_contiguity_list","text":"2-column matrix containing list contiguous classes. definition, class contiguous , data stored memory efficiency. Similarly, pairs (,j) j contiguous < j stored.","code":""},{"path":"dzt/reference/clusters_contiguity_list.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"List Contiguous Classes — clusters_contiguity_list","text":"clusters_contiguity_matrix(): Returns contiguity matrix instead list.","code":""},{"path":"dzt/reference/clusters_sizes-Partition-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the sizes of clusters of the Partition object. — clusters_sizes,Partition-method","title":"Get the sizes of clusters of the Partition object. — clusters_sizes,Partition-method","text":"Get sizes clusters Partition object.","code":""},{"path":"dzt/reference/clusters_sizes-Partition-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the sizes of clusters of the Partition object. — clusters_sizes,Partition-method","text":"","code":"# S4 method for Partition clusters_sizes(partition, sizes = NULL)"},{"path":"dzt/reference/clusters_sizes-Partition-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the sizes of clusters of the Partition object. — clusters_sizes,Partition-method","text":"partition Partition object. sizes numeric vector representing sizes individual elements.","code":""},{"path":"dzt/reference/clusters_sizes-Partition-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the sizes of clusters of the Partition object. — clusters_sizes,Partition-method","text":"numeric vector representing sizes clusters.","code":""},{"path":"dzt/reference/clusters_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Sizes — clusters_sizes","title":"Cluster Sizes — clusters_sizes","text":"Determines sizes clusters given partition elements sizes.","code":""},{"path":"dzt/reference/clusters_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Sizes — clusters_sizes","text":"","code":"clusters_sizes(partition, sizes = NULL)"},{"path":"dzt/reference/clusters_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Sizes — clusters_sizes","text":"partition numeric vector representing partition elements. sizes numeric vector representing sizes individual elements.","code":""},{"path":"dzt/reference/complete_contiguity.html","id":null,"dir":"Reference","previous_headings":"","what":"Object representing complete contiguity — complete_contiguity","title":"Object representing complete contiguity — complete_contiguity","text":"complete contiguity elements set directly connected others.","code":""},{"path":"dzt/reference/complete_contiguity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object representing complete contiguity — complete_contiguity","text":"","code":"complete_contiguity_matrix(x)  complete_contiguity_graph(x)"},{"path":"dzt/reference/complete_contiguity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object representing complete contiguity — complete_contiguity","text":"x argument giving information number elements. Can strictly positive integer, pbCon object matrix.","code":""},{"path":[]},{"path":"dzt/reference/connected_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Connected Components — connected_components","title":"Connected Components — connected_components","text":"Determines set connected components set via contiguity matrix.","code":""},{"path":"dzt/reference/connected_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connected Components — connected_components","text":"","code":"connected_components(contiguity)  nb_connected_components(contiguity)"},{"path":"dzt/reference/connected_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connected Components — connected_components","text":"contiguity contiguity matrix n elements.","code":""},{"path":"dzt/reference/connected_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connected Components — connected_components","text":"integer vector length n element id connected component.","code":""},{"path":"dzt/reference/connected_components.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Connected Components — connected_components","text":"nb_connected_components(): Returns number connected components set.","code":""},{"path":"dzt/reference/constructor_AHCTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an AHCTree object. — constructor_AHCTree","title":"Create an AHCTree object. — constructor_AHCTree","text":"function creates AHCTree object given clustering problem partitions. partitions can provided list Partition objects single Partition object number desired partitions (n). n specified greater 1, create n copies given Partition object.","code":""},{"path":"dzt/reference/constructor_AHCTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an AHCTree object. — constructor_AHCTree","text":"","code":"constructor_AHCTree(pb, partitions = list(), n = NULL)"},{"path":"dzt/reference/constructor_AHCTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an AHCTree object. — constructor_AHCTree","text":"pb object class pbCon representing clustering problem. partitions list Partition objects single Partition object. n Number partitions create single Partition object provided. Default NULL.","code":""},{"path":"dzt/reference/constructor_AHCTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an AHCTree object. — constructor_AHCTree","text":"AHCTree object specified clustering problem partitions.","code":""},{"path":"dzt/reference/constructor_Partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Partition using the provided parameters. — constructor_Partition","title":"Create a Partition using the provided parameters. — constructor_Partition","text":"Create Partition using provided parameters.","code":""},{"path":"dzt/reference/constructor_Partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Partition using the provided parameters. — constructor_Partition","text":"","code":"constructor_Partition(   pb,   partition,   method,   methodDetails = list(),   contiguity = NA,   minConstraint = NA_real_,   maxConstraint = NA_real_,   scoreMinSizeConst = NA_real_,   scoreMaxSizeConst = NA_real_,   criteria = list() )"},{"path":"dzt/reference/constructor_Partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Partition using the provided parameters. — constructor_Partition","text":"pb pbCon object. partition numeric vector representing partition. method character string representing method used partitioning. methodDetails list containing details method used partitioning. contiguity logical value indicating partition satisfies contiguity constraint. minConstraint logical value indicating partition satisfies min size constraint. maxConstraint logical value indicating partition satisfies max size constraint. scoreMinSizeConst numeric value representing minimum score size constraints. NA value calculated. scoreMaxSizeConst numeric value representing maximum score size constraints. NA value calculated. criteria list containing criteria partition.","code":""},{"path":"dzt/reference/constructor_Partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Partition using the provided parameters. — constructor_Partition","text":"new Partition object.","code":""},{"path":"dzt/reference/cpp_nearest_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the nearest neighbor of some points — cpp_nearest_neighbor","title":"Find the nearest neighbor of some points — cpp_nearest_neighbor","text":"set points (subsetPoints), find nearest neighbor another set (subsetNeighbors). Distances given p' x n' matrix (distances), p' >= p (p number points) n' >= n (n number neighbors). points neighbors come set, put inner TRUE assuring nearest neighbor point .","code":""},{"path":"dzt/reference/cpp_nearest_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the nearest neighbor of some points — cpp_nearest_neighbor","text":"","code":"nearest_neighbor_matrix(   distances,   subsetPoints,   subsetNeighbors,   contiguity,   inner )"},{"path":"dzt/reference/cpp_nearest_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the nearest neighbor of some points — cpp_nearest_neighbor","text":"distances distances points neighbors. row point column neighbor. subsetPoints vector strictly positive integers giving position points nearest neighbor must found. Positions starts 1 like R. Must least length one better values unique. subsetNeighbors vector strictly positive integers giving position elements set can consider neighbor point subsetPoints. Positions starts 1 like R. Must least length one better values unique. contiguity case contiguity constraints points. element subsetPoints one subsetNeighbors contiguous second element neighbor first one. contiguity constraints must considered matrix 0 rows 0 columns must sent. Otherwise must logical matrix number rows columns distante.","code":""},{"path":"dzt/reference/cpp_nearest_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the nearest neighbor of some points — cpp_nearest_neighbor","text":"vector length p point position nearest neighbor (0 exist). Positions starts 1 like R.","code":""},{"path":"dzt/reference/cpp_nearest_neighbor.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Find the nearest neighbor of some points — cpp_nearest_neighbor","text":"nearest_neighbor_matrix(): case distances matrix","code":""},{"path":"dzt/reference/diameter_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the diameter of a set (or subset) of elements. — diameter_set","title":"Calculate the diameter of a set (or subset) of elements. — diameter_set","text":"functions calculates diameter (.e. maximum distance two elements set) set (subset) elements based distance matrix.","code":""},{"path":"dzt/reference/diameter_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the diameter of a set (or subset) of elements. — diameter_set","text":"","code":"diameter_set(distances)  diameter_cluster(distances, indices)"},{"path":"dzt/reference/diameter_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the diameter of a set (or subset) of elements. — diameter_set","text":"distances distance matrix set elements. indices Indices names elements members cluster.","code":""},{"path":"dzt/reference/diameter_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the diameter of a set (or subset) of elements. — diameter_set","text":"diameter set (subset) positive real number.","code":""},{"path":"dzt/reference/diameter_set.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate the diameter of a set (or subset) of elements. — diameter_set","text":"diameter_set(): get diameter entire set. diameter_cluster(): calculates diameter subset defined indices.","code":""},{"path":"dzt/reference/distMat-access.html","id":null,"dir":"Reference","previous_headings":"","what":"Access to DistMat data` — distMat-access","title":"Access to DistMat data` — distMat-access","text":"Rules following : rows columns given submatrix returned asked rows columns rows (resp. columns given) submatrix return asked rows (resp. columns) entire columns (resp. rows) rows columns missing entire matrix sent back. Depending drop (flag) one row / one column given result simplified vector form . values missing calculated possible d distance function data data frame.","code":""},{"path":"dzt/reference/distMat-access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access to DistMat data` — distMat-access","text":"","code":"# S4 method for DistMat,matrix,missing,ANY [(x, i, j, drop)  # S4 method for DistMat,numericOrMissing,numericOrMissing,ANY [(x, i, j, drop)  # S4 method for DistMat,list,missing,ANY [(x, i, j, drop)"},{"path":"dzt/reference/distMat-access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access to DistMat data` — distMat-access","text":"x AbstractSymMat inheriting object vector composed indices wished rows. j vector composed indices wished columns","code":""},{"path":"dzt/reference/distMat-access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access to DistMat data` — distMat-access","text":"Depending drop dimensions j, matrix vector.","code":""},{"path":"dzt/reference/distMat_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Is there missing values in the distance matrix ? — distMat_NA","title":"Is there missing values in the distance matrix ? — distMat_NA","text":"missing values distance matrix ?","code":""},{"path":"dzt/reference/distMat_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is there missing values in the distance matrix ? — distMat_NA","text":"","code":"# S4 method for DistMat anyNA(x)  # S4 method for DistMat is.na(x)"},{"path":"dzt/reference/distMat_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is there missing values in the distance matrix ? — distMat_NA","text":"x DistMat object","code":""},{"path":"dzt/reference/distMat_NA.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Is there missing values in the distance matrix ? — distMat_NA","text":"anyNA(DistMat): Check DistMat object contains NA values .na(DistMat): Check values NA","code":""},{"path":"dzt/reference/distMat_access_diag.html","id":null,"dir":"Reference","previous_headings":"","what":"Access to diagonal of a DistMat object. The result is constantly\na double vector of length the number of elements. — distMat_access_diag","title":"Access to diagonal of a DistMat object. The result is constantly\na double vector of length the number of elements. — distMat_access_diag","text":"Access diagonal DistMat object. result constantly double vector length number elements.","code":""},{"path":"dzt/reference/distMat_access_diag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access to diagonal of a DistMat object. The result is constantly\na double vector of length the number of elements. — distMat_access_diag","text":"","code":"# S4 method for DistMat diag(x)"},{"path":"dzt/reference/distMat_alleq.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom all.equal method for comparing DistMat objects with matrices — distMat_alleq","title":"Custom all.equal method for comparing DistMat objects with matrices — distMat_alleq","text":"Custom .equal method comparing DistMat objects matrices","code":""},{"path":"dzt/reference/distMat_alleq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom all.equal method for comparing DistMat objects with matrices — distMat_alleq","text":"","code":"# S3 method for equal.DistMat.Matrix all(target, current)  # S4 method for DistMat,matrix all.equal(target, current)  # S4 method for matrix,DistMat all.equal(target, current, ...)  # S4 method for DistMat,DistMat all.equal(target, current, ...)"},{"path":"dzt/reference/distMat_alleq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom all.equal method for comparing DistMat objects with matrices — distMat_alleq","text":"target, current two variables, one least DistMat.","code":""},{"path":"dzt/reference/distMat_alleq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom all.equal method for comparing DistMat objects with matrices — distMat_alleq","text":"TRUE target current equal, FALSE otherwise","code":""},{"path":"dzt/reference/distMat_alleq.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Custom all.equal method for comparing DistMat objects with matrices — distMat_alleq","text":".equal(target = matrix, current = DistMat): matrix + DistMat .equal(target = DistMat, current = DistMat): DistMat + DistMat","code":""},{"path":"dzt/reference/distMat_replace_values.html","id":null,"dir":"Reference","previous_headings":"","what":"DistMat values replacement\nCall the AbstractSymMat replacement method. Check that values\nare all positive and if NA replace them by NA_real_ — distMat_replace_values","title":"DistMat values replacement\nCall the AbstractSymMat replacement method. Check that values\nare all positive and if NA replace them by NA_real_ — distMat_replace_values","text":"DistMat values replacement Call AbstractSymMat replacement method. Check values positive NA replace NA_real_","code":""},{"path":"dzt/reference/distMat_replace_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DistMat values replacement\nCall the AbstractSymMat replacement method. Check that values\nare all positive and if NA replace them by NA_real_ — distMat_replace_values","text":"","code":"# S4 method for DistMat,numericOrMissing,numericOrMissing,numeric [(x, i, j) <- value  # S4 method for DistMat,matrix,missing,numeric [(x, i, j) <- value"},{"path":"dzt/reference/distMat_replace_values.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"DistMat values replacement\nCall the AbstractSymMat replacement method. Check that values\nare all positive and if NA replace them by NA_real_ — distMat_replace_values","text":"`[`(x = DistMat, = numericOrMissing, j = numericOrMissing) <- value: case j vectors. Might missing. `[`(x = DistMat, = matrix, j = missing) <- value: case indexes given pairs matrix","code":""},{"path":"dzt/reference/dunn.html","id":null,"dir":"Reference","previous_headings":"","what":"Dunn Index — dunn","title":"Dunn Index — dunn","text":"Calculates Dunn index given partition based inter-element distance matrix. Dunn index assesses compactness separation clusters partition.","code":""},{"path":"dzt/reference/dunn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dunn Index — dunn","text":"","code":"dunn_index(distances, partition, linkage = \"single\", valueOnly = FALSE, ...)"},{"path":"dzt/reference/dunn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dunn Index — dunn","text":"distances inter-element distance matrix. partition partition interest. linkage method computing inter-cluster distances. Defaults \"single\" (minimum distance clusters). valueOnly TRUE, returns Dunn index value (D) instead full result.","code":""},{"path":"dzt/reference/dunn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dunn Index — dunn","text":"valueOnly TRUE, returns Dunn index value (D) floating-point number. Otherwise, returns list containing following components: - diameters: vector containing diameters cluster. - linkageDistances: matrix containing inter-cluster distances. - clustersMoinsSepares: IDs two clusters smallest separation. - separation: separation two clusters smallest separation. - leastCompactCluster: ID least compact cluster. - compactness: diameter least compact cluster. - D: Dunn index value, calculated separation divided compactness. - linkage: method used computing inter-cluster distances.","code":""},{"path":"dzt/reference/dunn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dunn Index — dunn","text":"Dunn, Joseph C. (1973) fuzzy relative ISODATA process use detecting compact well-separated clusters, Journal Cybernetics","code":""},{"path":"dzt/reference/elements_transferables.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a list of transferable elements for pbCon class — elements_transferables","title":"Generates a list of transferable elements for pbCon class — elements_transferables","text":"Determines list transferable elements cluster partition. Determines updated list transferable elements modification partition.","code":""},{"path":"dzt/reference/elements_transferables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a list of transferable elements for pbCon class — elements_transferables","text":"","code":"transferable_elements_pb(regionalisation, pb, contiguityGraph, contiguityMat)  maj_elements_transferables(   anciennePartition_vec,   nouvellePartition_vec,   oldTransferablePoints_list,   pb,   contiguityGraph,   contiguityMat,   donor = NULL,   receiver = NULL )"},{"path":"dzt/reference/elements_transferables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a list of transferable elements for pbCon class — elements_transferables","text":"regionalisation partition (vector positive integers) pb pbCon class object contiguityGraph igraph contiguity graph contiguityMat contiguity matrix anciennePartition_vec initial partition (vector positive integers) nouvellePartition_vec modified partition (vector positive integers) oldTransferablePoints_list previous list transferable elements donor Identifier donor cluster receiver Identifier receiver cluster","code":""},{"path":"dzt/reference/elements_transferables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a list of transferable elements for pbCon class — elements_transferables","text":"list three elements: 'frontier', 'articulation', 'transferable' containing information boundary, articulation, transferable elements.","code":""},{"path":"dzt/reference/elements_transferables.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generates a list of transferable elements for pbCon class — elements_transferables","text":"maj_elements_transferables(): Determines updated list transferable elements modification partition.","code":""},{"path":"dzt/reference/enhance_feasible.html","id":null,"dir":"Reference","previous_headings":"","what":"Improvement of an existing feasible solution — enhance_feasible","title":"Improvement of an existing feasible solution — enhance_feasible","text":"Algorithm improve (according certain criterion) solution feasible certain classification problem connectivity size constraints.","code":""},{"path":"dzt/reference/enhance_feasible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Improvement of an existing feasible solution — enhance_feasible","text":"","code":"enhance_feasible(   regionalisation,   distances = NULL,   contiguity = NULL,   sizes = NULL,   d = NULL,   data = NULL,   m = 0,   M = Inf,   standardQuant = FALSE,   binarQual = FALSE,   enhanceCriteria = c(\"AHC\", \"Silhouette\", \"Dunn\"),   linkages = \"saut max\",   evaluationCriteria = enhanceCriteria,   maxIt = Inf,   parallele = TRUE,   nbCores = detectCores() - 1L,   verbose = TRUE )"},{"path":"dzt/reference/enhance_feasible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Improvement of an existing feasible solution — enhance_feasible","text":"regionalisation feasible regionalisation optimize. distances distance matrix problem. can omitted distance function d data context data provided. distances provided, distances must present. (distance matrix) contiguity contiguity matrix igraph contiguity graph. provided, problem considered completely contiguous (elements neighbors ). sizes Represents size element. default, set 1 element (size cluster becomes cardinal). data must positive zero. (positive real numeric vector) d Distance function elements. can omitted distances already indicated. present, data must also specified. classical distances available, recommended use rather personal function optimisation reasons : \"euclidean\": Euclidean distance. \"manhattan\" : Manhattan distance. \"minkowski\" : Minkowski's distance. case value p >= 1 must specified. (function string) data data.frame row represents data related element. can omitted d omitted. Present variables can quantitative qualitative. qualitative variables present, distances may used. Possibility standardising variables transforming qualitative variables binary variables (one-hot encoding) using standardQuant binarQual. (data.frame) m Minimum size constraint. Must positive zero small enough problem feasible. Default 0 (constraint). (positive number) M Maximum size constraint. Must positive, superior equal m large enough problem feasible. Default Inf (constraint). (positive number) standardQuant TRUE variables data standardised (.e., centered scaled), FALSE (default) otherwise. Standardisation applied possible binarization qualitative variables (see binarQual). (flag) binarQual TRUE qualitative variables binarized (one-hot encoding), example, make data set compatible common distances standardize variables. FALSE (default) otherwise. (flag) enhanceCriteria vector criteria used enhancement actual feasible solution. Currently available choices available_criteria(), plus \"AHC\" (depends linkages parameter). Compared others AHC improve global criterion locally, hoping reduce computing time. Regarding criterion feasible solution, built move unique element cluster another better element closer cluster actual (depending linkage). linkages Vector linkage distances used criterion (\"Dunn\", \"AHC\") needs . evaluationCriteria criteria used comparison enhancement. evaluated feasible solution given criterion used enhancement. Must vector composed available criteria c3t. Dunn index one criterion per linkage given. See available_criteria(). maxIt maximum number allowed iterations. Default Inf. (strictly positive integer) parallele Logical indicating whether use parallel processing. Default TRUE. nbCores Number CPU cores use parallel processing (sockets method). Default one less detected number cores. verbose Logical indicating whether display progress messages. Default TRUE.","code":""},{"path":"dzt/reference/enhance_feasible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Improvement of an existing feasible solution — enhance_feasible","text":"tibble one row per try. row following variables: criterion: name criterion used improvement. linkage: type linkage distance used (NA argument irrelevant actual criterion). sampleSize: size sample calculation criterion (NA irrelevant). statut: state improvement. Indicates whether improvement made . iterations: number improving iterations performed. regionalisationOpti: new regionalisation. Identical input argument improvement made. one column per criterion indicated  critereEvaluation. criteria use linkage distance, one column per linkage distance given linkage per criterion.","code":""},{"path":"dzt/reference/enhance_feasible.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Improvement of an existing feasible solution — enhance_feasible","text":"Marc Christine Michel Isnard. \"Un algorithme de regroupement d'unités statistiques selon certains critères de similitudes\" Insee Méthodes, 2000, p. 50`","code":""},{"path":"dzt/reference/equivalent_partitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Are two partitions equivalent? — equivalent_partitions","title":"Are two partitions equivalent? — equivalent_partitions","text":"Check two partitions equivalent, .e. represent clustering.","code":""},{"path":"dzt/reference/equivalent_partitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are two partitions equivalent? — equivalent_partitions","text":"","code":"equivalent_partitions(partition1, partition2)"},{"path":"dzt/reference/equivalent_partitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are two partitions equivalent? — equivalent_partitions","text":"partition1, partition2 two non-empty vectors representing. partitions compared","code":""},{"path":"dzt/reference/equivalent_partitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are two partitions equivalent? — equivalent_partitions","text":"TRUE partitions equivalent, FALSE otherwise.","code":""},{"path":"dzt/reference/equivalent_partitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are two partitions equivalent? — equivalent_partitions","text":"","code":"p1 <- c(2, 4, 3) p2 <- c(\"yes\", \"no\", \"maybe\") equivalent_partitions(p1, p2) # TRUE #> [1] TRUE  p3 <- c(2, 4, 3) p4 <- c(\"yes\", \"no\", \"no\") equivalent_partitions(p3, p4) # FALSE #> [1] FALSE"},{"path":"dzt/reference/gen_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid Simulation — gen_grid","title":"Grid Simulation — gen_grid","text":"Simulates territory form grid contiguity, distribution individuals across cells, context different sizes.","code":""},{"path":"dzt/reference/gen_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid Simulation — gen_grid","text":"","code":"gen_grid(   x_int,   y_int,   contiguityType = \"Queen\",   nbIndividuals = x_int * y_int,   nbMinEmptyZones = 0L,   nbMetropolises = 0L,   propInMetropolises = 0.4,   quantitatives_mat = c(0, 1),   qualitatives_list = NULL,   nbQuantitatives = 0L,   seed = NULL )  simple_grid(x_int, y_int = x_int, avgPersonsPerCell = 100, seed = NULL)"},{"path":"dzt/reference/gen_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid Simulation — gen_grid","text":"x_int, y_int dimensions grid (positive integers) contiguityType type contiguity apply grid. Two options: \"Rook\": two cells contiguous share side. \"Queen\": two cells contiguous share side vertex. nbIndividuals Number individuals distribute (strictly positive integer). nbMinEmptyZones Number zones individuals present. Default 0. nbMinEmptyZones + nbMetropolises must smaller x_int * y_int. (positive integer) nbMetropolises Number zones populated. Default 0. nbMinEmptyZones_int + nbMetropolises_int must smaller x_int * y_int. (positive integer) propInMetropolises Proportion individuals found metropolises (). (floating point [0,1]) quantitatives_mat Characteristics quantitative variables generate. vector, must size 2. first element indicates mean, second element indicates standard deviation. nbQuantitatives > 0, many ..d. variables generated data specified vector. matrix, 2 columns. first column corresponds means independent quantitative variables generated. second column corresponds standard deviation variables. row corresponds variable. quantitative variables follow normal distribution. (vector size 2, matrix 2 columns, NULL) qualitatives_list List vectors vector contains categories qualitative variables generate. qualitative variable generated drawing uniformly categories. (list vectors NULL) nbQuantitatives quantitatives_mat vector, indicates number quantitative variables generate characteristics defined quantitatives_mat. Ignored otherwise. (positive zero integer) seed indicates random seed fixed generating values. NULL (default) seed must fixed. Otherwise must integer. (integer)","code":""},{"path":"dzt/reference/gen_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid Simulation — gen_grid","text":"list including: contiguity: grid's contiguity matrix distribution: dataframe specifying distribution sizes across different cells. Contains: nbIndividuals: number individuals zone. sum equals nbElems_int. emptyFixedZone: TRUE zone fixed empty, FALSE otherwise. metropolis: TRUE zone metropolis, FALSE otherwise. context: dataframe row corresponds context/data related individual, column variable.","code":""},{"path":"dzt/reference/gen_grid.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Grid Simulation — gen_grid","text":"simple_grid(): simpler version \"Queen\" contiguity,","code":""},{"path":"dzt/reference/gen_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid Simulation — gen_grid","text":"","code":"simple_grid(2L, 3L, 100.0, 123L) #> $contiguity #>       (1,1) (2,1) (1,2) (2,2) (1,3) (2,3) #> (1,1)  TRUE  TRUE  TRUE  TRUE FALSE FALSE #> (2,1)  TRUE  TRUE  TRUE  TRUE FALSE FALSE #> (1,2)  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> (2,2)  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> (1,3) FALSE FALSE  TRUE  TRUE  TRUE  TRUE #> (2,3) FALSE FALSE  TRUE  TRUE  TRUE  TRUE #>  #> $repartition #>   nbIndividuals emptyFixedZone metropolis #> 1           106          FALSE      FALSE #> 2           102          FALSE      FALSE #> 3            96          FALSE      FALSE #> 4            92          FALSE      FALSE #> 5           100          FALSE      FALSE #> 6           104          FALSE      FALSE #>  #> $context #>      quant_1   quant_2    quant_3 #> 1 -1.6505465 11.339175  -6.127438 #> 2 -0.3497542 13.266288  -5.181410 #> 3  0.7564064  9.386457 -14.997505 #> 4 -0.5388092  7.931617   6.015526 #> 5  0.2272919 -3.215745  -7.422180 #> 6  0.4922286  9.535295  -8.863157 #>"},{"path":"dzt/reference/gen_initial_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate initial partition. — gen_initial_partition","title":"Generate initial partition. — gen_initial_partition","text":"function generates initial partition considering connectivity maximum size constraints.","code":""},{"path":"dzt/reference/gen_initial_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate initial partition. — gen_initial_partition","text":"","code":"gen_initial_partition(pb, mode = \"unitary\", nbFusions = 1L)  gen_initial_partitions(pb, modes, nbFusions = 1L)"},{"path":"dzt/reference/gen_initial_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate initial partition. — gen_initial_partition","text":"pb pbCon object. mode character string specifying mode generating initial partition. Possible values \"unitary\" (default) \"random\". nbFusions integer specifying number fusions performed \"random\" mode. modes character vector specifying modes generating initial partitions.","code":""},{"path":"dzt/reference/gen_initial_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate initial partition. — gen_initial_partition","text":"numeric vector representing initial partition.","code":""},{"path":"dzt/reference/gen_initial_partition.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate initial partition. — gen_initial_partition","text":"gen_initial_partitions(): generates multiple initial partitions","code":""},{"path":"dzt/reference/interior_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Interior boundary of a partition — interior_boundary","title":"Interior boundary of a partition — interior_boundary","text":"Determines set elements, distributed clusters, contiguous element another cluster.","code":""},{"path":"dzt/reference/interior_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interior boundary of a partition — interior_boundary","text":"","code":"interior_boundary(contiguity, partition, removeSymmetry = TRUE)"},{"path":"dzt/reference/interior_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interior boundary of a partition — interior_boundary","text":"contiguity contiguity matrix contiguity graph (package igraph). Prefer matrix possible. (contiguity matrix igraph graph) partition partition. (vector strictly positive integers) removeSymmetry TRUE (default) symmetry removed result. (flag)","code":""},{"path":"dzt/reference/interior_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interior boundary of a partition — interior_boundary","text":"matrix 4 columns (x1, x2, cluster1, cluster2) many rows possible connections element cluster another. removeSymmetry = TRUE, rows x1 < x2 kept.","code":""},{"path":"dzt/reference/interior_boundary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interior boundary of a partition — interior_boundary","text":"interior boundary partition, certain contiguity, defined set elements contiguous least one element different cluster .","code":""},{"path":"dzt/reference/is.na-AbstractSymMat-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Where are located NA is our symmetric matrix? — is.na,AbstractSymMat-method","title":"Where are located NA is our symmetric matrix? — is.na,AbstractSymMat-method","text":"located NA symmetric matrix?","code":""},{"path":"dzt/reference/is.na-AbstractSymMat-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Where are located NA is our symmetric matrix? — is.na,AbstractSymMat-method","text":"","code":"# S4 method for AbstractSymMat is.na(x)"},{"path":"dzt/reference/is.na-AbstractSymMat-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Where are located NA is our symmetric matrix? — is.na,AbstractSymMat-method","text":"x AbstractSymMat object.","code":""},{"path":"dzt/reference/is.na-AbstractSymMat-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Where are located NA is our symmetric matrix? — is.na,AbstractSymMat-method","text":"logical matrix dimensions AbstractSymMat object, indicating element NA.","code":""},{"path":"dzt/reference/is.na.not.nan.html","id":null,"dir":"Reference","previous_headings":"","what":"values, i.e. NA but not NaN. — is.na.not.nan","title":"values, i.e. NA but not NaN. — is.na.not.nan","text":"values, .e. NA NaN.","code":""},{"path":"dzt/reference/is.na.not.nan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"values, i.e. NA but not NaN. — is.na.not.nan","text":"","code":"# S3 method for not.nan is.na(x)"},{"path":"dzt/reference/is_connected-matrix-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Connectivity — is_connected,matrix-method","title":"Check Connectivity — is_connected,matrix-method","text":"Verifies via contiguity matrix whether set connected.","code":""},{"path":"dzt/reference/is_connected-matrix-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Connectivity — is_connected,matrix-method","text":"","code":"# S4 method for matrix is_connected(graph, mode = c(\"weak\", \"strong\"))"},{"path":"dzt/reference/is_connected-matrix-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Connectivity — is_connected,matrix-method","text":"graph Contiguity matrix elements. (contiguity matrix)","code":""},{"path":"dzt/reference/is_connected-matrix-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Connectivity — is_connected,matrix-method","text":"TRUE set connected, FALSE otherwise.","code":""},{"path":[]},{"path":"dzt/reference/is_connected-matrix-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Connectivity — is_connected,matrix-method","text":"","code":"contiguity1 <- matrix(c(FALSE, TRUE, FALSE,                         TRUE, FALSE, TRUE,                         FALSE, TRUE, FALSE), nrow = 3L)  is_connected(contiguity1) # TRUE #> Error in ensure_igraph(graph): Must provide a graph object (provided wrong object type).  contiguity2 <- matrix(c(FALSE, FALSE,                         FALSE, FALSE), nrow = 2L)  is_connected(contiguity2) # FALSE #> Error in ensure_igraph(graph): Must provide a graph object (provided wrong object type)."},{"path":"dzt/reference/linkage_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Distances between clusters (linkage distances) — linkage_distances","title":"Distances between clusters (linkage distances) — linkage_distances","text":"functions calculating distances two sets using distances elements.","code":""},{"path":"dzt/reference/linkage_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distances between clusters (linkage distances) — linkage_distances","text":"","code":"single_linkage(distances)  complete_linkage(distances)  centroid_linkage(dataCluster1, dataCluster2, d = euclidean_distance)  is_single_linkage(...)  is_complete_linkage(...)  is_single_or_complete_linkage(linkage)  is_average_linkage(...)  is_medoid_linkage(...)  is_centroid_linkage(...)  is_hausdorff_linkage(...)"},{"path":"dzt/reference/linkage_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distances between clusters (linkage distances) — linkage_distances","text":"distances distance matrix elements first second cluster. (matrix) dataCluster1 Data related elements first cluster. Must contain least one individual least one variable. variables must quantitative. (data frame) dataCluster2 Data related elements second cluster. restrictions dataCluster1. Must contain variables first data frame. (data frame) d distance function elements. Apart first two arguments, others () must optional. Must return positive real number. Default euclidean distance. (function)","code":""},{"path":"dzt/reference/linkage_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distances between clusters (linkage distances) — linkage_distances","text":"distance two clusters. (one positive value)","code":""},{"path":"dzt/reference/linkage_distances.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Distances between clusters (linkage distances) — linkage_distances","text":"single_linkage(): single linkage, .e. take minimum distances elements first elements second cluster. complete_linkage(): complete linkage, .e. take maximum distances elements first elements second cluster. centroid_linkage(): centroid linkage distance. Distance used obtain distance classes elements composed quantitative variables. centroid cluster determined, inter-element distance applied two centroids. is_single_linkage(): Check given linkage distance single linkage is_complete_linkage(): Check given linkage distance complete linkage is_single_or_complete_linkage(): Check given linkage distance single complete linkage is_average_linkage(): Check given linkage distance average linkage is_medoid_linkage(): Check given linkage distance medoid linkage is_centroid_linkage(): Check given linkage distance centroid linkage is_hausdorff_linkage(): Check given linkage distance Hausdorff linkage","code":""},{"path":"dzt/reference/medoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Medoid Calculation — medoid","title":"Medoid Calculation — medoid","text":"Determines medoid one several subsets elements using distance matrix.","code":""},{"path":"dzt/reference/medoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Medoid Calculation — medoid","text":"","code":"medoid(distances, byName = FALSE)  medoids_partition(distances, partition, clusters = NULL)"},{"path":"dzt/reference/medoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Medoid Calculation — medoid","text":"distances distance matrix used find medoid(s) (distance matrix). byName TRUE returned result row name corresponding medoid, FALSE row number. Ignored distances named. (flag) partition partition medoids cluster determined (vector). clusters set clusters medoid calculated (default).","code":""},{"path":"dzt/reference/medoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Medoid Calculation — medoid","text":"medoid: depending byName, name identifier medoid. medoids_partition: named numeric vector indicating, cluster subset , identifier medoid.","code":""},{"path":"dzt/reference/medoid.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Medoid Calculation — medoid","text":"medoid(): Determine medoid set. medoids_partition(): Calculation medoid cluster partition.","code":""},{"path":"dzt/reference/medoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Medoid Calculation — medoid","text":"","code":"M <- matrix(c(0.0, 1.0, 2.0,               1.0, 0.0, 3.0,               2.0, 3.0, 00.))  medoid(M) #> [1] 1"},{"path":"dzt/reference/merge_cc_partitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges Partition Connected Components — merge_cc_partitions","title":"Merges Partition Connected Components — merge_cc_partitions","text":"function merges partitions connected components back together.","code":""},{"path":"dzt/reference/merge_cc_partitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges Partition Connected Components — merge_cc_partitions","text":"","code":"merge_cc_partitions(components, partitions)"},{"path":"dzt/reference/merge_cc_partitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges Partition Connected Components — merge_cc_partitions","text":"components vector indicating connected component index element. partitions list partition vectors, vector represents partition connected component.","code":""},{"path":"dzt/reference/merge_cc_partitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merges Partition Connected Components — merge_cc_partitions","text":"merged partition vector.","code":""},{"path":"dzt/reference/minkowski_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the distance between two elements using the Minkowski distance. — minkowski_distance","title":"Calculate the distance between two elements using the Minkowski distance. — minkowski_distance","text":"Calculate distance two elements using Minkowski distance.","code":""},{"path":"dzt/reference/minkowski_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the distance between two elements using the Minkowski distance. — minkowski_distance","text":"","code":"minkowski_distance(x, y, p = 2L)"},{"path":"dzt/reference/minkowski_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the distance between two elements using the Minkowski distance. — minkowski_distance","text":"x First element (numeric vector non-zero length). y Second element. Must length x (numeric vector non-zero length). p Real number greater equal one.","code":""},{"path":"dzt/reference/minkowski_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the distance between two elements using the Minkowski distance. — minkowski_distance","text":"positive real number representing Minkowski distance x y.","code":""},{"path":"dzt/reference/nbClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of clusters in a partition (per connected component) — nbClusters","title":"Number of clusters in a partition (per connected component) — nbClusters","text":"Give number clusters partition. number can total number number connected component.","code":""},{"path":"dzt/reference/nbClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of clusters in a partition (per connected component) — nbClusters","text":"","code":"nbClusters(partition, components = NULL)"},{"path":"dzt/reference/nbClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of clusters in a partition (per connected component) — nbClusters","text":"partition partition vector. components vector giving element connected component. NULL (default) components ignored. Otherwise must vector length partition.","code":""},{"path":"dzt/reference/nbClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of clusters in a partition (per connected component) — nbClusters","text":"components NULL, total number clusters partition (positive integer). Otherwise named vector positive integers length number connected components giving number clusters per connected component.","code":""},{"path":"dzt/reference/nbClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of clusters in a partition (per connected component) — nbClusters","text":"","code":"nbClusters(c(1L, 2L, \"x\", 1L)) # 3 #> [1] 3"},{"path":"dzt/reference/nearest_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the nearest neighbor of some points — nearest_neighbor","title":"Find the nearest neighbor of some points — nearest_neighbor","text":"set points (subsetPoints), find nearest neighbor another set (subsetNeighbors). Distances given p' x n' matrix (distances), p' >= p (p number points) n' >= n (n number neighbors). points neighbors come set, put inner TRUE assuring nearest neighbor point .","code":""},{"path":"dzt/reference/nearest_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the nearest neighbor of some points — nearest_neighbor","text":"","code":"nearest_neighbor(   distances,   inner = FALSE,   contiguity = NULL,   subsetPoints = seq_len(nrow(distances)),   subsetNeighbors = seq_len(ncol(distances)) )"},{"path":"dzt/reference/nearest_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the nearest neighbor of some points — nearest_neighbor","text":"distances distances points neighbors. row point column neighbor. vector length k > 0 given, consider like matrix distances p' = k points n' = 1 neighbor. inner Flag indicating points neighbors come set distance set matrix distance. Diagonal distance considered, assuring nearest neighbor point . FALSE default (different sets). contiguity case connectivity constraint points. element subsetPoints one subsetNeighbors contiguous second element neighbor first one. NULL default (connectivity constraint). precised, must logical matrix dimensions distances. subsetPoints vector strictly positive integers giving position points nearest neighbor must found. Default points (p = p'). distances row names can instead (characters). points given, return empty vector. Values can duplicated increase complexity. subsetNeighbors vector strictly positive integers giving position elements set can consider neighbor point subsetPoints. Default neighbors (n = n'). distances column names can instead (characters). neighbors given error generated. Values expected unique.","code":""},{"path":"dzt/reference/nearest_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the nearest neighbor of some points — nearest_neighbor","text":"vector length p point position nearest neighbor (NaN exist). point nearest neighbor distance neighbors missing. distances column names position neighbors replaced names. returned vector named IDs points, name distances row names.","code":""},{"path":"dzt/reference/normalize_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization of data — normalize_df","title":"Normalization of data — normalize_df","text":"Normalization data","code":""},{"path":"dzt/reference/normalize_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalization of data — normalize_df","text":"","code":"normalize_df(df, standardQuant = TRUE, binarQual = FALSE)  numeric_variabes(df)  all_numeric_variables(df)  is_df_normalized(df)"},{"path":"dzt/reference/normalize_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalization of data — normalize_df","text":"df data frame equivalent (tibble, data table...) standardQuant TRUE (default) quantitative variables df must normalised / standardised, .e centered (0 empirical mean) reduced / scaled (1 unbiased empirical standard deviation). FALSE otherwise. number rows equal 1 standardisation realized. Standardisation realized transformation qualitative quantitative, binarQual equal TRUE transformed qualitative variables normalized. binarQual TRUE non-numeric values must converted numeric form creating qualitative variable one dummy variable per modality minus one. Original columns removed. FALSE (default) otherwise. Ignore variables quantitative. standardQuant equals TRUE created dummies standardised well.","code":""},{"path":"dzt/reference/normalize_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalization of data — normalize_df","text":"normalize_df normalized version df. binarQual = TRUE categorical variables df number variables (columns) df might higher. numeric_variables logical vector length ncol(df) indicating variable numeric . all_numeric_variables, TRUE variables df quantitative, FALSE otherwise. Returns TRUE convention variable . is_df_normalized, flag equals TRUE numeric variables normalized, FALSE otherwise. Returns TRUE numeric variables.","code":""},{"path":"dzt/reference/normalize_df.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Normalization of data — normalize_df","text":"normalize_df(): Normalize quantitative / qualitative df variables. numeric_variabes(): Give logical mask indicating columns df numeric. all_numeric_variables(): Give flag indicating variables df quantitative. Shortcut (numeric_variables(df)). is_df_normalized(): Check numeric variables df normalized.","code":""},{"path":"dzt/reference/normalize_df.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normalization of data — normalize_df","text":"Kaplan, J. & Schlegel, B. (2023). fastDummies: Fast Creation Dummy (Binary) Columns Rows Categorical Variables.","code":""},{"path":[]},{"path":"dzt/reference/optimal_partitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort partitions by a clustering criterion — optimal_partitions","title":"Sort partitions by a clustering criterion — optimal_partitions","text":"Returns order best partitions according certain criterion.","code":""},{"path":"dzt/reference/optimal_partitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort partitions by a clustering criterion — optimal_partitions","text":"","code":"optimal_partitions(   criterionValues,   criterion,   byName = TRUE,   names = NULL,   keepNA = TRUE )"},{"path":"dzt/reference/optimal_partitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort partitions by a clustering criterion — optimal_partitions","text":"criterionValues Vector numerical data indicating criterion values different partitions. (numeric vector) criterion Name clustering criterion. (character string) byName TRUE (default) returned names partitions rather identifier. FALSE otherwise. partition names can specified via names variable. NULL, names criterionValues vector used. none available, byName set FALSE. (boolean) names Names partitions. Used byName TRUE, ignored otherwise. used, must size criterionValues. (vector NULL) keepNA flag indicating NA values kept result. TRUE, kept end vector. FALSE, removed.","code":""},{"path":"dzt/reference/optimal_partitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort partitions by a clustering criterion — optimal_partitions","text":"vector size criterionValues, indicating order (best worst) partitions relative requested criterion. indicated data identifiers partitions byName = FALSE, names otherwise. (vector)","code":""},{"path":"dzt/reference/partition_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of elements in a partition — partition_length","title":"Number of elements in a partition — partition_length","text":"Give number elements partition","code":""},{"path":"dzt/reference/partition_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of elements in a partition — partition_length","text":"","code":"# S4 method for Partition length(x)"},{"path":"dzt/reference/partition_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of elements in a partition — partition_length","text":"x Partition object","code":""},{"path":"dzt/reference/partition_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of elements in a partition — partition_length","text":"number elements partition. (positive integer)","code":""},{"path":"dzt/reference/partition_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms a vector of partitions into a list where each element\nis a vector indicating which element of the set is present in each cluster. — partition_to_list","title":"Transforms a vector of partitions into a list where each element\nis a vector indicating which element of the set is present in each cluster. — partition_to_list","text":"Transforms vector partitions list element vector indicating element set present cluster.","code":""},{"path":"dzt/reference/partition_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms a vector of partitions into a list where each element\nis a vector indicating which element of the set is present in each cluster. — partition_to_list","text":"","code":"partition_to_list(partition)"},{"path":"dzt/reference/partition_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms a vector of partitions into a list where each element\nis a vector indicating which element of the set is present in each cluster. — partition_to_list","text":"partition numeric vector representing partition.","code":""},{"path":"dzt/reference/partition_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms a vector of partitions into a list where each element\nis a vector indicating which element of the set is present in each cluster. — partition_to_list","text":"list vectors, vector representing cluster element indices.","code":""},{"path":"dzt/reference/resolve_unfeasible.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve an unfeasible regionalisation — resolve_unfeasible","title":"Resolve an unfeasible regionalisation — resolve_unfeasible","text":"algorithm tries transform unfeasible solution check connectivity constraint one size constraints. Even problem feasible algorithm ensure succeed.","code":""},{"path":"dzt/reference/resolve_unfeasible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve an unfeasible regionalisation — resolve_unfeasible","text":"","code":"resolve_unfeasible(   distances = NULL,   contiguity = NULL,   sizes = NULL,   d = NULL,   data = NULL,   m = 0,   M = Inf,   standardQuant = FALSE,   binarQual = FALSE,   regionalisation,   maxItTransfers = Inf,   verbose = FALSE,   ... )"},{"path":"dzt/reference/resolve_unfeasible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve an unfeasible regionalisation — resolve_unfeasible","text":"distances distance matrix problem. can omitted distance function d data context data provided. distances provided, distances must present. (distance matrix) contiguity contiguity matrix igraph contiguity graph. provided, problem considered completely contiguous (elements neighbors ). sizes Represents size element. default, set 1 element (size cluster becomes cardinal). data must positive zero. (positive real numeric vector) d Distance function elements. can omitted distances already indicated. present, data must also specified. classical distances available, recommended use rather personal function optimisation reasons : \"euclidean\": Euclidean distance. \"manhattan\" : Manhattan distance. \"minkowski\" : Minkowski's distance. case value p >= 1 must specified. (function string) data data.frame row represents data related element. can omitted d omitted. Present variables can quantitative qualitative. qualitative variables present, distances may used. Possibility standardising variables transforming qualitative variables binary variables (one-hot encoding) using standardQuant binarQual. (data.frame) m Minimum size constraint. Must positive zero small enough problem feasible. Default 0 (constraint). (positive number) M Maximum size constraint. Must positive, superior equal m large enough problem feasible. Default Inf (constraint). (positive number) standardQuant TRUE variables data standardised (.e., centered scaled), FALSE (default) otherwise. Standardisation applied possible binarization qualitative variables (see binarQual). (flag) binarQual TRUE qualitative variables binarized (one-hot encoding), example, make data set compatible common distances standardize variables. FALSE (default) otherwise. (flag) regionalisation partition checking contiguity constraint checking least min max size constraint. maxItTransfers positive integer indicating maximum number elements can transferred. verbose Logical indicating whether display progress messages. Default TRUE. ... used development.","code":""},{"path":"dzt/reference/resolve_unfeasible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve an unfeasible regionalisation — resolve_unfeasible","text":"","code":"set.seed(123L) grid  <- simple_grid(4L, 5L) data <- grid$context sizes <- grid$repartition$nbIndividuals contiguity <- grid$contiguity  m <- 200.0 M <- 800.0  d <- \"euclidean\"  unfeasibleSolution <-   c(1L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 4L,     4L, 2L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L)  resolve_unfeasible(contiguity = contiguity,                    sizes = sizes,                    data = data,                    d = d, m = m, M = M,                    regionalisation = unfeasibleSolution,                    verbose = FALSE) #> $status #> [1] \"fully_resolved\" #>  #> $itTransfers #> [1] 6 #>  #> $itFusions #> [1] 0 #>  #> $initialSmallRegions #> [1] 1 3 #>  #> $finalSmallRegions #> NULL #>  #> $initialBigRegions #> [1] 2 4 #>  #> $finalBigRegions #> NULL #>  #> $resolvedRegions #> [1] 2 3 4 1 #>  #> $initialRegionsSizes #>   1   2   3   4  #>  89 811 103 997  #>  #> $finalRegionsSizes #>   1   2   3   4  #> 315 727 274 684  #>  #> $regionalisation #>  [1] 1 2 2 2 1 3 3 3 3 1 4 3 3 4 4 4 3 4 4 4 #>  #> $initialNbClusters #> [1] 4 #>  #> $finalNbClusters #> [1] 4 #>"},{"path":"dzt/reference/score_size_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Give a score of constraint size respect — score_size_constraints","title":"Give a score of constraint size respect — score_size_constraints","text":"functions give score indicates partition respects size constraint(s). score equals 0 means constraint completely respected. strictly positive value means clusters respect constraint size.","code":""},{"path":"dzt/reference/score_size_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give a score of constraint size respect — score_size_constraints","text":"","code":"score_constraints_min(   clustersSizes = NULL,   m = 0,   sizes = NULL,   partition = NULL,   f = identity )  .score_constraints_min(m, clustersSizes, f = identity)  score_constraints_max(   clustersSizes = NULL,   M = Inf,   sizes = NULL,   partition = NULL,   f = identity )  .score_constraints_max(M, clustersSizes, f = identity)  score_constraints_table(scoreContraintesMin, scoreContraintesMax)  score_constraints(   clustersSizes = NULL,   m = 0,   M = Inf,   sizes = NULL,   partition = NULL,   f = identity,   details = FALSE )"},{"path":"dzt/reference/score_size_constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give a score of constraint size respect — score_size_constraints","text":"clustersSizes size different clusters. equals NULL (default) sizes calculated. partition partition problem. Used clustersSizes NULL. f function take vector difference cluster sizes constraint value. Must vectorial, give 0 values negative positive otherwise. details flag indicating details must given final score. pb pbCon object.","code":""},{"path":"dzt/reference/score_size_constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give a score of constraint size respect — score_size_constraints","text":"positive double value indicating much partition respect size constraint(s). equals 0 constraint respected cluster. higher score less constraint(s) respected. (positive double value)","code":""},{"path":"dzt/reference/search_fusion_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Search of a fusion tree under connectivity and/or size constraints. — search_fusion_tree","title":"Search of a fusion tree under connectivity and/or size constraints. — search_fusion_tree","text":"Search fusion tree connectivity /size constraints.","code":""},{"path":"dzt/reference/search_fusion_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search of a fusion tree under connectivity and/or size constraints. — search_fusion_tree","text":"","code":"search_fusion_tree(   distances = NULL,   contiguity = NULL,   sizes = NULL,   d = NULL,   data = NULL,   m = 0L,   M = Inf,   standardQuant = FALSE,   binarQual = FALSE,   search = \"DFS\",   stopCriterion = \"first_valid_branch\",   childChoice = \"distance\",   regionalisation = NULL,   linkage = \"complete\" )  AHR_fusion_tree(   distances = NULL,   contiguity = NULL,   sizes = NULL,   d = NULL,   data = NULL,   m = 0L,   M = Inf,   standardQuant = FALSE,   binarQual = FALSE,   regionalisation = NULL,   linkage = \"complete\" )"},{"path":"dzt/reference/search_fusion_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search of a fusion tree under connectivity and/or size constraints. — search_fusion_tree","text":"distances distance matrix problem. can omitted distance function d data context data provided. distances provided, distances must present. (distance matrix) contiguity contiguity matrix igraph contiguity graph. provided, problem considered completely contiguous (elements neighbors ). sizes Represents size element. default, set 1 element (size cluster becomes cardinal). data must positive zero. (positive real numeric vector) d Distance function elements. can omitted distances already indicated. present, data must also specified. classical distances available, recommended use rather personal function optimisation reasons : \"euclidean\": Euclidean distance. \"manhattan\" : Manhattan distance. \"minkowski\" : Minkowski's distance. case value p >= 1 must specified. (function string) data data.frame row represents data related element. can omitted d omitted. Present variables can quantitative qualitative. qualitative variables present, distances may used. Possibility standardising variables transforming qualitative variables binary variables (one-hot encoding) using standardQuant binarQual. (data.frame) m Minimum size constraint. Must positive zero small enough problem feasible. Default 0 (constraint). (positive number) M Maximum size constraint. Must positive, superior equal m large enough problem feasible. Default Inf (constraint). (positive number) standardQuant TRUE variables data standardised (.e., centered scaled), FALSE (default) otherwise. Standardisation applied possible binarization qualitative variables (see binarQual). (flag) binarQual TRUE qualitative variables binarized (one-hot encoding), example, make data set compatible common distances standardize variables. FALSE (default) otherwise. (flag) search Type traversal apply fusion tree. Three possibilities: \"BFS\" (Depth First Search) \"DFS\" (Breadth First Search) \"random\" (random) stopCriterion Indicates traversal stop. possibilities follows: \"full\": algorithm stops possible fusions initial partition evaluated. \"first_valid_node\": Stop first feasible solution found. Useful minimum size constraint present. \"first_valid_branch\": Stop soon node without fusion selected feasible solution found. childChoice case breadth-first depth-first search, way child nodes ordered (accessed). Multiple choices: \"random\": Children ordered randomly. \"first_valid_node\": Initial order preserved. \"distance\": Nodes ordered increasing inter-cluster distance. regionalisation regionalisation start tree traversal. linkage used chilChoice =  \"distance\". Can function string. determines linkage criterion selection children nodes. using custom  distance function, must take pairwise distance matrix argument return linkage distance. Default implemented linkages can seen available_linkages().","code":""},{"path":"dzt/reference/search_fusion_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search of a fusion tree under connectivity and/or size constraints. — search_fusion_tree","text":"triplet (search = \"DFS\", childChoice = \"distance\", stopCriterion = \"first_valid_branch\") corresponds Agglomerative Hierarchical Clustering (AHC) contiguity size constraints, necessarily stopping fusion two clusters feasible partition found. two methods equivalent minimum size constraint.","code":""},{"path":"dzt/reference/search_fusion_tree.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Search of a fusion tree under connectivity and/or size constraints. — search_fusion_tree","text":"AHR_fusion_tree(): Shortcut search_fusion_tree case AHC / AHR search.","code":""},{"path":[]},{"path":"dzt/reference/simp_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify Minimum Size Constraint — simp_cont","title":"Simplify Minimum Size Constraint — simp_cont","text":"Simplifies minimum size constraint given vector.","code":""},{"path":"dzt/reference/simp_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify Minimum Size Constraint — simp_cont","text":"","code":"simplify_minSizeConst(m_vec, sizes = NULL)  simplify_maxSizeConst(M_vec, sizes, connectedComponents = NULL)"},{"path":"dzt/reference/simp_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify Minimum Size Constraint — simp_cont","text":"m_vec numeric vector min constraints simplified. sizes numeric vector representing sizes elements. M_vec numeric vector max constraints values simplified. connectedComponents optional numeric vector specifying connected components.","code":""},{"path":"dzt/reference/simp_cont.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Simplify Minimum Size Constraint — simp_cont","text":"simplify_maxSizeConst(): Simplifies maximum size constraint given vector.","code":""},{"path":"dzt/reference/standardize_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize a partition — standardize_partition","title":"Standardize a partition — standardize_partition","text":"Changes cluster identifiers partition vector form consecutive sequence.","code":""},{"path":"dzt/reference/standardize_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize a partition — standardize_partition","text":"","code":"standardize_partition(partition)"},{"path":"dzt/reference/standardize_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize a partition — standardize_partition","text":"partition non-empty vector representing partition.","code":""},{"path":"dzt/reference/standardize_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize a partition — standardize_partition","text":"strictly positive integer vector representing updated partition consecutive cluster identifiers.","code":""},{"path":"dzt/reference/standardize_partition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize a partition — standardize_partition","text":"form also used stats::cutree(). Two partitions equivalent standardised forms equal.","code":""},{"path":"dzt/reference/standardize_partition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize a partition — standardize_partition","text":"","code":"p <- c(2, 3, 1, \"a\", 2)  standardize_partition(p) # c(1, 2, 3, 4, 1) #> [1] 1 2 3 4 1"},{"path":"dzt/reference/survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a survey — survey","title":"Simulation of a survey — survey","text":"grid simulates survey. dimension 50 * 70 (3500 cells). cells empty (around 80%). total number people 4000. 1% cells metropolises, aggregating 40% population. context consists 2 quantitative 1 qualitative variable.","code":""},{"path":"dzt/reference/survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a survey — survey","text":"","code":"survey_grid_50x70"},{"path":"dzt/reference/survey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulation of a survey — survey","text":"list following components: contiguity: Contiguity matrix grid repartition: dataframe specifying distribution sizes across different cells. Contains: nbIndividuals: number individuals zone. sum nbElems_int. emptyFixedZone: TRUE zone fixed empty, FALSE otherwise. metropolis: TRUE zone metropolis, FALSE otherwise. context: dataframe row corresponds context / data related individual column variable.","code":""},{"path":"dzt/reference/update_calinski_harabasz.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the Calinski-Harabasz index — update_calinski_harabasz","title":"Update the Calinski-Harabasz index — update_calinski_harabasz","text":"Update Calinski-Harabasz index","code":""},{"path":"dzt/reference/update_calinski_harabasz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the Calinski-Harabasz index — update_calinski_harabasz","text":"","code":"update_calinski_harabasz(   dataCriterion,   donor,   receiver,   givenElements,   partitionBefore,   dataElements )"},{"path":"dzt/reference/update_calinski_harabasz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the Calinski-Harabasz index — update_calinski_harabasz","text":"dataCriterion list containing data actual criterion value. donor id donor cluster. givenElements set elements donor given receveir. (vector length least 1 made strictly positive integers) partitionBefore partition exchange elements. dataElements data elements. Corresponds data c3t functions.","code":""},{"path":"dzt/reference/update_criterion_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Update criterion parameters — update_criterion_params","title":"Update criterion parameters — update_criterion_params","text":"Update criterion parameters","code":""},{"path":"dzt/reference/update_criterion_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update criterion parameters — update_criterion_params","text":"partitionBefore partition exchange elements. dataCriterion list containing data actual criterion value. donor id donor cluster. receveir id receiver cluster. givenElement element donor given receveir. (strictly positive integer) givenElements set elements donor given receveir. (vector length least 1 made strictly positive integers) dataElements data elements. Corresponds data c3t functions.","code":""},{"path":"dzt/reference/update_dunn_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Dunn index — update_dunn_index","title":"Update Dunn index — update_dunn_index","text":"Update Dunn index","code":""},{"path":"dzt/reference/update_dunn_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Dunn index — update_dunn_index","text":"","code":"update_dunn_index(   dataCriterion,   distances,   partitionBefore,   donor,   receiver,   givenElement )"},{"path":"dzt/reference/update_dunn_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Dunn index — update_dunn_index","text":"dataCriterion list containing data actual criterion value. partitionBefore partition exchange elements. donor id donor cluster. givenElement element donor given receveir. (strictly positive integer)","code":""},{"path":"dzt/reference/valid_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Size Constraints — valid_cont","title":"Validate Size Constraints — valid_cont","text":"Validate Size Constraints","code":""},{"path":"dzt/reference/valid_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Size Constraints — valid_cont","text":"","code":"checkMinSizeConstraints(   m_vec,   sizes,   connectedComponents = NULL,   authorizeNegative = FALSE,   len = NULL )  checkMaxSizeConstraints(M_vec, sizes, len = NULL)"},{"path":"dzt/reference/valid_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Size Constraints — valid_cont","text":"m_vec numeric vector min constraints values tested. sizes numeric vector representing sizes elements. connectedComponents optional numeric vector specifying connected components. M_vec numeric vector max constraints tested.","code":""},{"path":"dzt/reference/valid_cont.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Validate Size Constraints — valid_cont","text":"checkMinSizeConstraints(): Verifies minimum size constraint given vector connected components. checkMaxSizeConstraints(): Verifies maximum size constraint given vector.","code":""},{"path":"dzt/reference/variance_tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance and sum of square\nTools for calculating variance and sum of squares\nwith a matrix or a data.frame. — variance_tools","title":"Variance and sum of square\nTools for calculating variance and sum of squares\nwith a matrix or a data.frame. — variance_tools","text":"Variance sum square Tools calculating variance sum squares matrix data.frame.","code":""},{"path":"dzt/reference/variance_tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance and sum of square\nTools for calculating variance and sum of squares\nwith a matrix or a data.frame. — variance_tools","text":"","code":"colVars(data, unbiased = TRUE, aggregate = FALSE)  sum_squares(data, aggregate = TRUE)"},{"path":"dzt/reference/variance_tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance and sum of square\nTools for calculating variance and sum of squares\nwith a matrix or a data.frame. — variance_tools","text":"data matrix data.frame containing numeric values. unbiased flag indicating returned empirical variance unbiased (sum squares divided n - 1, default) biased (divided n). aggregate flag indicating returned value sum values obtained per variable. Ignored data one column.","code":""},{"path":"dzt/reference/variance_tools.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Variance and sum of square\nTools for calculating variance and sum of squares\nwith a matrix or a data.frame. — variance_tools","text":"colVars(): Return empirical variance column data. sum_squares(): Return sum squares column data.","code":""},{"path":"dzt/news/index.html","id":"c3t-010","dir":"Changelog","previous_headings":"","what":"c3t 0.1.0","title":"c3t 0.1.0","text":"Initial CRAN submission.","code":""}]
