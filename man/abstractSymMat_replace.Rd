% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abstractSymMat.R, R/pbCon.R, R/symSparseMat.R,
%   R/symMMat.R, R/symVMat.R
\name{abstractSymMat_replace}
\alias{abstractSymMat_replace}
\alias{[<-,pbCon,numeric,numeric,numeric-method}
\alias{[<-,pbCon,matrix,missing,numeric-method}
\alias{[<-,SymSparseMat,numeric,numeric,numeric-method}
\alias{[<-,SymMMat,numeric,numeric,numeric-method}
\alias{[<-,SymMMat,numeric,missing,numeric-method}
\alias{[<-,SymMMat,missing,numeric,numeric-method}
\alias{[<-,SymMMat,matrix,missing,numeric-method}
\alias{[<-,SymMMat,missing,missing,matrix-method}
\alias{[<-,SymVMat,numeric,numeric,numeric-method}
\alias{[<-,SymVMat,matrix,missing,numeric-method}
\title{Replace value of a \code{AbstractSymMat} object or subclasses}
\usage{
\S4method{[}{pbCon,numeric,numeric,numeric}(x, i, j) <- value

\S4method{[}{pbCon,matrix,missing,numeric}(x, i, j) <- value

\S4method{[}{SymSparseMat,numeric,numeric,numeric}(x, i, j) <- value

\S4method{[}{SymMMat,numeric,numeric,numeric}(x, i, j) <- value

\S4method{[}{SymMMat,numeric,missing,numeric}(x, i, j) <- value

\S4method{[}{SymMMat,missing,numeric,numeric}(x, i, j) <- value

\S4method{[}{SymMMat,matrix,missing,numeric}(x, i, j) <- value

\S4method{[}{SymMMat,missing,missing,matrix}(x, i, j) <- value

\S4method{[}{SymVMat,numeric,numeric,numeric}(x, i, j) <- value

\S4method{[}{SymVMat,matrix,missing,numeric}(x, i, j) <- value
}
\arguments{
\item{x}{a \code{AbstractSymMat} object or subclasses}

\item{i, j}{strictly positive integers vectors giving
the position of the elements (rows for \code{i} and columns for \code{j})
that will be replaced. If \code{i} is a matrix then it is supposed that
one row corresponds to one element (first column being the row and second
column being the column). 0, 1 or both of them can be missing.}

\item{values}{A vector of values to replace the elements of \code{x}. If
\code{i} and \code{j} are missing can be a matrix.}
}
\value{
the updated object \code{x}, even if modifications are made in place.
}
\description{
Because an \code{AbstractSymMat} is symmetrical replacing values at some position
(i,j) will automatically set the same value at position (j,i).
}
\keyword{internal}
